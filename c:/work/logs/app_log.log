2017-02-21 11:17:57 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 11:17:57 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 11:17:57 IST 2017]; root of context hierarchy
2017-02-21 11:17:57 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 11:17:58 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 11:17:59 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 11:17:59 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 11:17:59 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 11:17:59 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 11:17:59 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 11:18:01 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 11:18:01 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 11:18:02 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 11:18:02 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 11:18:02 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 11:18:02 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 11:18:04 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 11:18:04 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 11:18:04 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 11:18:07 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 11:18:07 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 11:18:07 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 11:18:07 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 11:18:08 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 11:18:08 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 11:18:08 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:18:08 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 11:18:08 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:10 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:18:14 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 11:18:14 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 11:18:15 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 11:18:15 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 11:18:15 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 11:18:15 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 11:18:15 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 11:18:15 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 11:18:15 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1236609
2017-02-21 11:18:15 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 11:18:15 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 11:18:15 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 11:18:15 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 17262 ms
2017-02-21 11:19:31 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-21 11:19:31 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 542
2017-02-21 11:19:31 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-21 11:19:31 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-21 11:19:31 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-21 11:19:31 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-21 11:19:31 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:19:31 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 554
2017-02-21 11:19:31 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:19:31 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 11:20:18 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 11:20:18 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 11:20:18 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:20:18 INFO  Loggers:81 - Authenticationg the user
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 11:20:18 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 11:20:18 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 11:20:18 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 11:20:18 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 11:20:18 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 11:20:18 INFO  Loggers:66 - given modules size is : 10
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 11:20:18 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 11:20:18 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 11:20:18 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 11:20:18 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 11:20:18 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:18 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 11:20:18 INFO  Loggers:81 - Token generated: 635894247999668248430222801394
2017-02-21 11:20:18 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 11:20:18 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 11:20:18 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=635894247999668248430222801394}
2017-02-21 11:20:18 INFO  Loggers:81 - Token Number635894247999668248430222801394
2017-02-21 11:20:18 INFO  Loggers:81 - Session Attribute: 635894247999668248430222801394
2017-02-21 11:20:19 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:20:19 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:23 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayController.editHoliday() :: 148
2017-02-21 11:20:34 INFO  Loggers:86 - Holiday [holidayDate=null, description=null, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:34 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayServicesImpl.deleteHoliday() :: 103
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayDaoImpl.deleteHoliday() :: 228
2017-02-21 11:20:34 INFO  Loggers:53 - Exception Occured :: HolidayDaoImpl.deleteHoliday() :: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1 :: 239
2017-02-21 11:20:34 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayDaoImpl.deleteHoliday() :: 243
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayServicesImpl.deleteHoliday() :: 111
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayController.editHoliday() :: 174
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:34 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:34 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:34 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:34 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:34 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:34 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:34 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:34 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:34 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:34 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:34 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:34 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:34 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:41 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:41 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:41 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:41 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:41 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:41 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:41 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:41 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:42 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:42 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:42 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:42 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:42 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:42 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:42 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:42 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:42 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:42 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:42 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:42 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:42 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:42 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:43 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayController.editHoliday() :: 148
2017-02-21 11:20:49 INFO  Loggers:86 - Holiday [holidayDate=null, description=null, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:49 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.deleteHoliday() :: 103
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.deleteHoliday() :: 228
2017-02-21 11:20:49 INFO  Loggers:53 - Exception Occured :: HolidayDaoImpl.deleteHoliday() :: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1 :: 239
2017-02-21 11:20:49 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayDaoImpl.deleteHoliday() :: 243
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayServicesImpl.deleteHoliday() :: 111
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayController.editHoliday() :: 174
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:49 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:49 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:49 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:49 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 11:20:54 INFO  Loggers:84 - feeList[]
2017-02-21 11:20:54 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:81 - Module: Fee
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 11:20:54 INFO  Loggers:81 - getting connections
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 11:20:54 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 11:20:54 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 11:20:54 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 11:20:54 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:81 - Module: Fee
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:54 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:54 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 11:20:54 INFO  Loggers:84 - feeList[]
2017-02-21 11:20:54 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 11:20:54 INFO  Loggers:81 - getting connections
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 11:20:54 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 11:20:54 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:20:54 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 11:20:56 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:56 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:56 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:56 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:57 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:57 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:57 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:20:57 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:57 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:20:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:57 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:20:57 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:20:57 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:20:57 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:58 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:58 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:58 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:20:58 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:20:59 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:20:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:20:59 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:20:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:20:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:20:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:20:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:20:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:20:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:20:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:20:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:20:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:20:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:20:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:20:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayController.editHoliday() :: 148
2017-02-21 11:21:04 INFO  Loggers:86 - Holiday [holidayDate=Tue Feb 21 00:00:00 IST 2017, description=holi, entryTime=2017-02-21-10.36.02.693, exitTime=null, updatedTime=null, isActive=Y]
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:04 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayServicesImpl.deleteHoliday() :: 103
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayDaoImpl.deleteHoliday() :: 228
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayDaoImpl.deleteHoliday() :: 243
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayServicesImpl.deleteHoliday() :: 111
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayController.editHoliday() :: 174
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:04 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:04 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:04 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:04 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:04 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:04 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:04 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:04 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:04 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:04 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:04 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:11 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:11 INFO  Loggers:84 - End :: Object Received []
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayController.addHoliday() :: 109
2017-02-21 11:21:19 INFO  Loggers:86 - Holiday [holidayDate=Tue Feb 21 11:21:11 IST 2017, description=holi, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.addHoliday() :: 58
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayDaoImpl.addHoliday() :: 90
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayDaoImpl.addHoliday() :: 121
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayServicesImpl.addHoliday() :: 69
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayController.addHoliday() :: 127
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:19 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:19 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:19 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:19 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:19 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:19 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:19 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:19 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:20 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:20 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:20 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:20 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:20 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:20 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:20 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:22 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayController.addHoliday() :: 109
2017-02-21 11:21:31 INFO  Loggers:86 - Holiday [holidayDate=Thu Mar 02 11:21:22 IST 2017, description=diwali, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.addHoliday() :: 58
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.addHoliday() :: 90
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayDaoImpl.addHoliday() :: 121
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayServicesImpl.addHoliday() :: 69
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.addHoliday() :: 127
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:31 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:36 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:36 INFO  Loggers:81 - Module: ReportCard
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:36 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 11:21:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 11:21:36 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 11:21:36 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:36 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:36 INFO  Loggers:81 - Module: ReportCard
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:36 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:36 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 11:21:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 11:21:36 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 11:21:36 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 11:21:36 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 11:21:37 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:21:37 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:21:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:37 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:37 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:38 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:38 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:38 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:21:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:21:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:21:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:21:38 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1084674
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:38 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:38 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:38 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:21:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:21:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:21:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:21:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:39 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:39 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:39 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:39 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:39 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:39 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:39 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:39 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:40 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:21:40 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:21:40 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:40 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:40 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:40 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:21:40 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:21:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:40 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:21:40 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:21:40 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:21:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:40 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:21:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:21:40 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:21:40 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:21:40 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:21:40 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:21:40 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:21:40 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:21:40 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: HolidayController.editHoliday() :: 148
2017-02-21 11:22:08 INFO  Loggers:86 - Holiday [holidayDate=null, description=null, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:22:08 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.deleteHoliday() :: 103
2017-02-21 11:22:08 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:22:08 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:22:08 INFO  Loggers:53 - Exception Occured :: HolidayServicesImpl.deleteHoliday() :: Could not open connection :: 109
2017-02-21 11:22:08 INFO  Loggers:105 - End :: HolidayServicesImpl.deleteHoliday() :: 111
2017-02-21 11:22:08 INFO  Loggers:105 - End :: HolidayController.editHoliday() :: 174
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:22:08 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:22:08 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:08 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:22:08 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:22:08 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: HolidayController.editHoliday() :: 148
2017-02-21 11:22:51 INFO  Loggers:86 - Holiday [holidayDate=null, description=null, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:22:51 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: HolidayServicesImpl.deleteHoliday() :: 103
2017-02-21 11:22:51 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:22:51 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:22:51 INFO  Loggers:53 - Exception Occured :: HolidayServicesImpl.deleteHoliday() :: Could not open connection :: 109
2017-02-21 11:22:51 INFO  Loggers:105 - End :: HolidayServicesImpl.deleteHoliday() :: 111
2017-02-21 11:22:51 INFO  Loggers:105 - End :: HolidayController.editHoliday() :: 174
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:22:51 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:22:51 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:22:51 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:22:51 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:22:51 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 11:28:21 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 11:28:21 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:28:21 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 11:28:21 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:28:21 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:28:21 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 11:28:31 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 11:28:31 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:28:31 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 11:28:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:28:31 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 11:28:31 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:28:31 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 11:28:31 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 11:28:31 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 11:32:00 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 11:32:00 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 11:32:00 IST 2017]; root of context hierarchy
2017-02-21 11:32:00 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 11:32:02 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 11:32:03 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 11:32:04 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 11:32:04 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 11:32:04 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 11:32:04 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 11:32:07 WARN  JdbcServicesImpl:204 - HHH000342: Could not obtain connection to query metadata : FATAL: sorry, too many clients already
2017-02-21 11:32:07 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 11:32:07 INFO  LobCreatorBuilder:88 - HHH000422: Disabling contextual LOB creation as connection was null
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 11:32:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 11:32:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 11:32:08 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 11:32:08 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 11:32:11 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 11:32:11 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 11:32:11 ERROR SchemaUpdate:201 - HHH000319: Could not get database metadata
org.postgresql.util.PSQLException: FATAL: sorry, too many clients already
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:443)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:217)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:215)
	at org.postgresql.Driver.makeConnection(Driver.java:404)
	at org.postgresql.Driver.connect(Driver.java:272)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:153)
	at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriver(DriverManagerDataSource.java:144)
	at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnectionFromDriver(AbstractDriverBasedDataSource.java:155)
	at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection(AbstractDriverBasedDataSource.java:120)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:139)
	at org.hibernate.tool.hbm2ddl.SuppliedConnectionProviderConnectionHelper.prepare(SuppliedConnectionProviderConnectionHelper.java:51)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:194)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:178)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:522)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1857)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1928)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:343)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:431)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
2017-02-21 11:32:11 ERROR SchemaUpdate:247 - HHH000299: Could not complete schema update
org.postgresql.util.PSQLException: FATAL: sorry, too many clients already
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:443)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:217)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:215)
	at org.postgresql.Driver.makeConnection(Driver.java:404)
	at org.postgresql.Driver.connect(Driver.java:272)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:153)
	at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriver(DriverManagerDataSource.java:144)
	at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnectionFromDriver(AbstractDriverBasedDataSource.java:155)
	at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection(AbstractDriverBasedDataSource.java:120)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:139)
	at org.hibernate.tool.hbm2ddl.SuppliedConnectionProviderConnectionHelper.prepare(SuppliedConnectionProviderConnectionHelper.java:51)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:194)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:178)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:522)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1857)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1928)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:343)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:431)
	at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:12 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:32:13 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 11:32:13 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 11:32:13 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 11:32:13 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 11:32:13 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 11:32:13 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 11:32:13 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 11:32:13 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 11:32:13 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4ad27c
2017-02-21 11:32:13 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 11:32:13 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 11:32:13 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 11:32:13 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 12469 ms
2017-02-21 11:32:14 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 11:32:00 IST 2017]; root of context hierarchy
2017-02-21 11:32:14 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 11:32:14 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 11:32:14 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 11:32:14 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 11:32:14 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 11:32:14 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 11:33:43 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 11:33:43 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 11:33:43 IST 2017]; root of context hierarchy
2017-02-21 11:33:43 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 11:33:44 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 11:33:44 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 11:33:44 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 11:33:44 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 11:33:44 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 11:33:44 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 11:33:45 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 11:33:45 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 11:33:45 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 11:33:45 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 11:33:45 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 11:33:45 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 11:33:46 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 11:33:46 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 11:33:46 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 11:33:46 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 11:33:46 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 11:33:46 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 11:33:46 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 11:33:47 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 11:33:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 11:33:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 11:33:47 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 11:33:47 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:47 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 11:33:48 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 11:33:48 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 11:33:48 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 11:33:48 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 11:33:48 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 11:33:48 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 11:33:48 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 11:33:48 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 11:33:48 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@13d23a8
2017-02-21 11:33:48 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 11:33:48 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 11:33:48 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 11:33:48 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5183 ms
2017-02-21 11:34:31 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 11:34:31 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:34:31 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 11:34:31 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:31 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 11:34:31 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:34:31 INFO  Loggers:81 - User is already logged in
2017-02-21 11:34:31 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 11:34:31 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 11:34:31 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 11:34:31 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 11:34:31 INFO  Loggers:66 - given modules size is : 10
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 11:34:31 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 11:34:31 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 11:34:31 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 11:34:32 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 11:34:32 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 11:34:32 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 11:34:32 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 11:34:32 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=635894247999668248430222801394}
2017-02-21 11:34:32 INFO  Loggers:81 - Token Number635894247999668248430222801394
2017-02-21 11:34:32 INFO  Loggers:81 - Session Attribute: 635894247999668248430222801394
2017-02-21 11:34:32 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:34:32 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:34:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:46 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:46 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:34:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:34:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:34:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:34:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:46 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:46 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:34:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:34:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:34:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:34:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:34:57 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:34:57 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:34:57 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:34:57 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:34:57 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:34:57 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:34:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:34:57 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:34:57 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:34:57 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:04 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/weekdays/delete/] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:81 - Module: Fee
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 11:35:10 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:10 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 11:35:10 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:10 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 11:35:10 INFO  Loggers:81 - getting connections
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 11:35:10 INFO  Loggers:84 - feeList[]
2017-02-21 11:35:10 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 11:35:10 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 11:35:10 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 11:35:10 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 11:35:10 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:81 - Module: Fee
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:10 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:10 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 11:35:10 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:11 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 11:35:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:11 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 11:35:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:11 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 11:35:11 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 11:35:11 INFO  Loggers:84 - feeList[]
2017-02-21 11:35:11 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 11:35:11 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 11:35:11 INFO  Loggers:81 - getting connections
2017-02-21 11:35:11 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 11:35:11 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 11:35:11 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 11:35:11 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:35:12 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:12 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:12 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:12 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:35:12 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:12 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:35:12 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:35:12 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:35:12 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:12 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:12 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:12 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:35:12 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:12 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:12 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:35:12 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:35:12 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:35:12 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:35:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:35:14 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:14 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:35:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:35:14 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:14 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:14 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:14 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:35:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:35:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:35:14 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:35:14 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:35:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:35:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:35:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:35:15 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:35:15 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:35:15 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:35:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:35:15 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:15 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:35:15 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:35:23 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/weekdays/delete/] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:45:33 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 11:45:33 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:45:33 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 11:45:33 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 11:45:33 INFO  Loggers:81 - Start :: Object Received 635894247999668248430222801394
2017-02-21 11:45:33 INFO  Loggers:86 - 
Token [
	TokenNumber=635894247999668248430222801394
	SmartID=null
	Role=null ]
2017-02-21 11:45:33 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 11:45:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 11:45:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:45:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 11:45:40 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 11:45:40 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 11:45:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:45:40 INFO  Loggers:81 - Authenticationg the user
2017-02-21 11:45:40 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 11:45:40 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 11:45:40 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 11:45:40 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 11:45:41 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 11:45:41 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 11:45:41 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 11:45:41 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 11:45:41 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 11:45:41 INFO  Loggers:66 - given modules size is : 10
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 11:45:41 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 11:45:41 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 11:45:41 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 11:45:41 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 11:45:41 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:41 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 11:45:41 INFO  Loggers:81 - Token generated: 74143572930202178904684608520
2017-02-21 11:45:41 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 11:45:41 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 11:45:41 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=74143572930202178904684608520}
2017-02-21 11:45:41 INFO  Loggers:81 - Token Number74143572930202178904684608520
2017-02-21 11:45:41 INFO  Loggers:81 - Session Attribute: 74143572930202178904684608520
2017-02-21 11:45:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:45:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:45:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:46 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:46 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:45:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:45:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:45:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:45:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:46 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:46 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:45:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:45:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:45:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:45:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:45:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:45:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:45:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:45:50 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:45:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:45:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:45:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:45:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:45:57 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/weekdays/delete] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:49:32 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/weekdays/delete] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:58:53 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 11:58:53 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:58:53 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 11:58:53 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 11:58:53 INFO  Loggers:81 - Start :: Object Received 74143572930202178904684608520
2017-02-21 11:58:53 INFO  Loggers:86 - 
Token [
	TokenNumber=74143572930202178904684608520
	SmartID=null
	Role=null ]
2017-02-21 11:58:53 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 11:59:25 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 11:59:25 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 11:59:25 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 11:59:25 INFO  Loggers:81 - Authenticationg the user
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 11:59:25 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 11:59:25 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 11:59:25 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 11:59:25 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 11:59:25 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 11:59:25 INFO  Loggers:66 - given modules size is : 10
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 11:59:25 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 11:59:25 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 11:59:25 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 11:59:25 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 11:59:25 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:25 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 11:59:25 INFO  Loggers:81 - Token generated: 1209534975873527465096229712778
2017-02-21 11:59:25 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 11:59:25 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 11:59:25 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1209534975873527465096229712778}
2017-02-21 11:59:25 INFO  Loggers:81 - Token Number1209534975873527465096229712778
2017-02-21 11:59:25 INFO  Loggers:81 - Session Attribute: 1209534975873527465096229712778
2017-02-21 11:59:26 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:59:26 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:59:33 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:33 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:59:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:59:33 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:59:33 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 11:59:33 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1133355
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:33 INFO  Loggers:81 - Module: RolePermission
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 11:59:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:33 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 11:59:33 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 11:59:33 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 11:59:33 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:59:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 11:59:35 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=100001
	Role=ADMIN ]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 11:59:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 11:59:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 11:59:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 11:59:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 11:59:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:00:22 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:00:22 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 12:00:22 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:00:22 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:00:22 INFO  Loggers:81 - Start :: Object Received 1209534975873527465096229712778
2017-02-21 12:00:22 INFO  Loggers:86 - 
Token [
	TokenNumber=1209534975873527465096229712778
	SmartID=null
	Role=null ]
2017-02-21 12:00:22 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:01:42 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:01:42 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:01:42 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:01:42 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:01:42 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:01:42 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:01:42 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:01:42 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:01:42 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:01:42 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:01:42 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:01:42 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:01:42 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:01:42 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:01:42 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:42 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:01:42 INFO  Loggers:81 - Token generated: 935499239473377937143424985853
2017-02-21 12:01:42 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:01:42 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:01:42 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=935499239473377937143424985853}
2017-02-21 12:01:42 INFO  Loggers:81 - Token Number935499239473377937143424985853
2017-02-21 12:01:42 INFO  Loggers:81 - Session Attribute: 935499239473377937143424985853
2017-02-21 12:01:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:01:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:01:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:45 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:45 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:01:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:01:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:01:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:01:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:45 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:45 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:01:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:01:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:01:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:01:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:01:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:01:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:01:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:01:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:49 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:01:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:01:49 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:01:50 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:01:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:01:50 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:01:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:01:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:01:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:01:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:01:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:01:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:01:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:01:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:01:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:01:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:01:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:01:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:06 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:03:06 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:03:06 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:03:06 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:03:06 INFO  Loggers:81 - Start :: Object Received 935499239473377937143424985853
2017-02-21 12:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=935499239473377937143424985853
	SmartID=null
	Role=null ]
2017-02-21 12:03:06 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:03:18 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:03:18 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:03:18 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:03:18 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:03:18 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:03:18 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:03:18 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:03:18 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:03:18 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:03:18 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:03:18 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:03:18 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:03:18 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:03:18 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:03:18 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:18 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:03:18 INFO  Loggers:81 - Token generated: 856126142153485966723280622054
2017-02-21 12:03:18 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:03:18 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:03:18 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=856126142153485966723280622054}
2017-02-21 12:03:18 INFO  Loggers:81 - Token Number856126142153485966723280622054
2017-02-21 12:03:18 INFO  Loggers:81 - Session Attribute: 856126142153485966723280622054
2017-02-21 12:03:18 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:03:19 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:03:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:21 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:21 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:03:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:03:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:03:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:03:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:21 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:21 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:03:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:03:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:03:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:03:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:03:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:03:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:03:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:03:23 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:03:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:03:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:03:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:03:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:03:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:09:25 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:09:25 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:09:25 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:09:25 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:09:25 INFO  Loggers:81 - Start :: Object Received 856126142153485966723280622054
2017-02-21 12:09:25 INFO  Loggers:86 - 
Token [
	TokenNumber=856126142153485966723280622054
	SmartID=null
	Role=null ]
2017-02-21 12:09:25 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:09:34 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:09:34 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:09:34 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:09:34 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:09:34 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:09:34 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:09:34 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:09:34 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:09:34 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:09:34 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:09:34 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:09:34 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:09:34 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:09:34 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:09:34 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:09:34 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:09:34 INFO  Loggers:81 - Token generated: 126388652601451984037926708989
2017-02-21 12:09:34 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:09:34 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:09:34 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=126388652601451984037926708989}
2017-02-21 12:09:34 INFO  Loggers:81 - Token Number126388652601451984037926708989
2017-02-21 12:09:34 INFO  Loggers:81 - Session Attribute: 126388652601451984037926708989
2017-02-21 12:09:35 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:09:35 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:09:37 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:09:37 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:09:37 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:09:37 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:09:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:09:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:09:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:09:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:09:37 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:09:37 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:09:37 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:09:37 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:09:37 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:09:37 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:09:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:09:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:09:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:09:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:09:37 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:09:37 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:09:37 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:09:37 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:10:31 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:10:31 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:10:31 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:10:31 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:10:31 INFO  Loggers:81 - Start :: Object Received 126388652601451984037926708989
2017-02-21 12:10:31 INFO  Loggers:86 - 
Token [
	TokenNumber=126388652601451984037926708989
	SmartID=null
	Role=null ]
2017-02-21 12:10:32 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:10:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:10:41 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:10:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:10:41 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:10:41 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:10:41 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:10:41 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:10:41 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:10:41 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:10:41 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:10:41 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:10:41 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:10:41 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:10:41 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:10:41 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:41 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:10:41 INFO  Loggers:81 - Token generated: 464831070361992026744618359306
2017-02-21 12:10:41 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:10:41 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:10:41 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=464831070361992026744618359306}
2017-02-21 12:10:41 INFO  Loggers:81 - Token Number464831070361992026744618359306
2017-02-21 12:10:41 INFO  Loggers:81 - Session Attribute: 464831070361992026744618359306
2017-02-21 12:10:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:10:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:10:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:43 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:10:43 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:10:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:10:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:10:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:10:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:10:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:10:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1962189
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:43 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:10:43 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:10:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:10:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:10:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:10:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:10:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:10:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:10:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:10:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:10:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:10:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:10:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:10:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 45
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:10:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:10:50 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:10:50 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 12:10:50 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 12:10:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:10:50 INFO  Loggers:60 - End :: Object Received null
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:10:50 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:10:50 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 12:10:50 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 12:10:50 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 12:34:41 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 11:33:43 IST 2017]; root of context hierarchy
2017-02-21 12:34:41 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 12:34:41 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 12:34:42 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 12:34:42 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 12:34:42 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 12:34:42 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 12:35:06 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 12:35:06 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 12:35:06 IST 2017]; root of context hierarchy
2017-02-21 12:35:06 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 12:35:07 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 12:35:07 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 12:35:07 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 12:35:07 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 12:35:07 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 12:35:07 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 12:35:08 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 12:35:08 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 12:35:08 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 12:35:08 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 12:35:08 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 12:35:08 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 12:35:13 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 12:35:13 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 12:35:13 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 12:35:13 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 12:35:13 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 12:35:13 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 12:35:13 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 12:35:14 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 12:35:14 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 12:35:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:35:14 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 12:35:14 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 12:35:14 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 12:35:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:35:14 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 12:35:14 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 12:35:14 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 12:35:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:35:14 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 12:35:14 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:35:14 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 12:35:15 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 12:35:15 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 12:35:15 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 12:35:15 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 12:35:15 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 12:35:15 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 12:35:15 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 12:35:15 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@746803
2017-02-21 12:35:15 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 12:35:15 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 12:35:15 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 12:35:15 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 9201 ms
2017-02-21 12:36:13 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:36:13 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:36:13 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:36:13 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:36:13 INFO  Loggers:81 - Start :: Object Received 464831070361992026744618359306
2017-02-21 12:36:13 INFO  Loggers:86 - 
Token [
	TokenNumber=464831070361992026744618359306
	SmartID=null
	Role=null ]
2017-02-21 12:36:14 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:37:00 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:37:00 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:37:00 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:37:00 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:37:00 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:37:00 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:37:00 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:37:00 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:37:01 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:37:01 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:37:01 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:37:01 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:37:01 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:37:01 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:37:01 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:37:01 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:37:01 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:37:01 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:37:01 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:37:01 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:37:01 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:37:01 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:01 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:37:01 INFO  Loggers:81 - Token generated: 1240206108496567611110466381909
2017-02-21 12:37:01 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:37:01 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:37:01 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1240206108496567611110466381909}
2017-02-21 12:37:01 INFO  Loggers:81 - Token Number1240206108496567611110466381909
2017-02-21 12:37:01 INFO  Loggers:81 - Session Attribute: 1240206108496567611110466381909
2017-02-21 12:37:01 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:37:01 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:37:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@146d003
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:03 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:03 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:37:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:37:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:37:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:37:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@146d003
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:03 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:03 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:37:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:37:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:37:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:37:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:37:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:37:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:37:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:37:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:37:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:37:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:37:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:37:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:43:55 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 12:35:06 IST 2017]; root of context hierarchy
2017-02-21 12:43:55 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 12:44:11 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 12:44:11 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 12:44:11 IST 2017]; root of context hierarchy
2017-02-21 12:44:11 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 12:44:12 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 12:44:12 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 12:44:12 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 12:44:12 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 12:44:12 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 12:44:12 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 12:44:13 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 12:44:13 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 12:44:13 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 12:44:13 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 12:44:13 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 12:44:13 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 12:44:14 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 12:44:14 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 12:44:14 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 12:44:14 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 12:44:14 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 12:44:14 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 12:44:14 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 12:44:15 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 12:44:15 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 12:44:15 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 12:44:15 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 12:44:15 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:15 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 12:44:16 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 12:44:16 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 12:44:16 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 12:44:16 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 12:44:16 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 12:44:16 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 12:44:16 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 12:44:16 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 12:44:16 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5add47
2017-02-21 12:44:16 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 12:44:16 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 12:44:16 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 12:44:16 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5436 ms
2017-02-21 12:44:25 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:44:25 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:44:25 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:44:25 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:44:25 INFO  Loggers:81 - Start :: Object Received 1240206108496567611110466381909
2017-02-21 12:44:25 INFO  Loggers:86 - 
Token [
	TokenNumber=1240206108496567611110466381909
	SmartID=null
	Role=null ]
2017-02-21 12:44:25 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:44:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:44:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:44:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:44:41 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:44:41 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:44:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:44:41 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:44:41 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:44:42 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:44:42 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:44:42 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:44:42 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:44:42 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:44:42 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:44:42 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:44:42 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:44:42 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:44:42 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:44:42 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:44:42 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:44:42 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:44:42 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:42 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:44:42 INFO  Loggers:81 - Token generated: 818858792708881253591855058985
2017-02-21 12:44:42 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:44:42 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:44:42 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=818858792708881253591855058985}
2017-02-21 12:44:42 INFO  Loggers:81 - Token Number818858792708881253591855058985
2017-02-21 12:44:42 INFO  Loggers:81 - Session Attribute: 818858792708881253591855058985
2017-02-21 12:44:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:44:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:44:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:45 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:45 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:44:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:44:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:44:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:44:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:45 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:45 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:44:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:44:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:44:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:44:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:44:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:44:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:44:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:44:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:44:48 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:44:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:44:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:44:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:44:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:44:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:32 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:47:32 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:47:32 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:47:32 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:47:32 INFO  Loggers:81 - Start :: Object Received 818858792708881253591855058985
2017-02-21 12:47:32 INFO  Loggers:86 - 
Token [
	TokenNumber=818858792708881253591855058985
	SmartID=null
	Role=null ]
2017-02-21 12:47:32 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:47:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:47:45 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:47:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:47:45 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:47:45 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:47:45 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:47:45 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:47:45 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:47:45 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:47:45 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:47:45 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:47:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:47:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:47:45 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:47:45 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:45 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:47:45 INFO  Loggers:81 - Token generated: 992465115384103188714304231095
2017-02-21 12:47:45 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:47:45 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:47:45 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=992465115384103188714304231095}
2017-02-21 12:47:45 INFO  Loggers:81 - Token Number992465115384103188714304231095
2017-02-21 12:47:45 INFO  Loggers:81 - Session Attribute: 992465115384103188714304231095
2017-02-21 12:47:45 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:47:45 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:47:49 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:49 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:49 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:49 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:47:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:47:49 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:47:49 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:47:49 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:49 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:49 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:49 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:47:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:49 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:47:49 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:47:49 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:47:49 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:47:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:47:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:47:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:47:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:47:54 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:47:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:47:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:47:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:47:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:47:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:36 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:48:36 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:48:36 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:48:36 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:48:36 INFO  Loggers:81 - Start :: Object Received 992465115384103188714304231095
2017-02-21 12:48:36 INFO  Loggers:86 - 
Token [
	TokenNumber=992465115384103188714304231095
	SmartID=null
	Role=null ]
2017-02-21 12:48:36 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:48:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:48:41 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:48:41 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:48:41 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:48:41 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:48:41 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:48:41 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:48:41 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:48:41 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:48:41 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:48:41 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:48:41 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:48:41 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:48:41 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:48:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:41 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:48:41 INFO  Loggers:81 - Token generated: 1196160962790300718111593701699
2017-02-21 12:48:41 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:48:41 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:48:41 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1196160962790300718111593701699}
2017-02-21 12:48:41 INFO  Loggers:81 - Token Number1196160962790300718111593701699
2017-02-21 12:48:41 INFO  Loggers:81 - Session Attribute: 1196160962790300718111593701699
2017-02-21 12:48:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:48:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:48:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:48:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:48:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:48:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:48:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:48:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:48:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:48:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:48:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:48:53 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:48:53 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:48:53 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:48:53 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:48:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:48:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:48:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:48:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:48:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:52:43 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:52:43 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:52:43 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:52:43 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:52:43 INFO  Loggers:81 - Start :: Object Received 1196160962790300718111593701699
2017-02-21 12:52:43 INFO  Loggers:86 - 
Token [
	TokenNumber=1196160962790300718111593701699
	SmartID=null
	Role=null ]
2017-02-21 12:52:43 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:52:53 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:52:53 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:52:53 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:52:53 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:52:53 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:52:53 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:52:53 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:52:53 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:52:53 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:52:53 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:52:53 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:52:53 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:52:53 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:52:53 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:52:53 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:52:53 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:52:53 INFO  Loggers:81 - Token generated: 207644499714333919476899528349
2017-02-21 12:52:53 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:52:53 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:52:53 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=207644499714333919476899528349}
2017-02-21 12:52:53 INFO  Loggers:81 - Token Number207644499714333919476899528349
2017-02-21 12:52:53 INFO  Loggers:81 - Session Attribute: 207644499714333919476899528349
2017-02-21 12:52:53 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:52:54 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:52:57 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:52:57 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:52:57 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:52:57 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:52:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:52:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:52:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:52:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:52:57 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:52:57 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:52:57 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@43dfcd
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:52:57 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:52:57 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:52:57 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:52:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:52:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:52:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:52:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:52:57 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:52:57 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:52:57 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:52:57 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:53:00 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:53:00 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:53:00 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:53:00 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:53:00 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:53:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:53:00 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:53:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:53:30 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 12:53:30 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:30 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 12:53:30 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 12:53:30 INFO  Loggers:81 - Start :: Object Received 207644499714333919476899528349
2017-02-21 12:53:30 INFO  Loggers:86 - 
Token [
	TokenNumber=207644499714333919476899528349
	SmartID=null
	Role=null ]
2017-02-21 12:53:30 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 12:54:46 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-21 12:54:46 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 542
2017-02-21 12:54:46 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-21 12:54:46 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-21 12:54:46 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-21 12:54:47 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 554
2017-02-21 12:54:47 INFO  Loggers:84 - End :: Object Received []
2017-02-21 12:54:47 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-21 12:54:47 INFO  Loggers:84 - End :: Object Received []
2017-02-21 12:54:47 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 12:54:49 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 12:54:49 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 12:54:49 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 12:54:49 INFO  Loggers:81 - Authenticationg the user
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 12:54:49 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 12:54:49 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 12:54:49 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 12:54:49 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 12:54:49 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 12:54:49 INFO  Loggers:66 - given modules size is : 10
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 12:54:49 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 12:54:49 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 12:54:49 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 12:54:49 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 12:54:49 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:49 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 12:54:49 INFO  Loggers:81 - Token generated: 807124467996825403031154048179
2017-02-21 12:54:49 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 12:54:49 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 12:54:49 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=807124467996825403031154048179}
2017-02-21 12:54:49 INFO  Loggers:81 - Token Number807124467996825403031154048179
2017-02-21 12:54:49 INFO  Loggers:81 - Session Attribute: 807124467996825403031154048179
2017-02-21 12:54:49 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:54:49 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:54:51 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:51 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:51 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:51 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:54:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:54:51 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:54:51 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 12:54:51 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:51 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:51 INFO  Loggers:81 - Module: RolePermission
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:51 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 12:54:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:51 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 12:54:51 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 12:54:51 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 12:54:51 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:54:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:54:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:54:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 12:54:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:52 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:52 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:54:52 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:54:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 12:54:53 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 12:54:53 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 12:54:53 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 12:54:53 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=100001
	Role=ADMIN ]
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 12:54:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 12:54:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 12:54:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 12:54:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 12:54:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 12:54:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 12:54:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 12:54:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 12:54:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 12:54:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:25 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:03:25 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 13:03:25 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:03:25 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:03:25 INFO  Loggers:81 - Start :: Object Received 807124467996825403031154048179
2017-02-21 13:03:25 INFO  Loggers:86 - 
Token [
	TokenNumber=807124467996825403031154048179
	SmartID=null
	Role=null ]
2017-02-21 13:03:25 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:03:35 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:03:35 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:03:35 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:03:35 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:03:35 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:03:35 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:03:35 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:03:35 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:03:35 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:03:35 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:03:35 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:03:35 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:03:35 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:03:35 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:03:35 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:36 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:03:36 INFO  Loggers:81 - Token generated: 939615483317310584397764027636
2017-02-21 13:03:36 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:03:36 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:03:36 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=939615483317310584397764027636}
2017-02-21 13:03:36 INFO  Loggers:81 - Token Number939615483317310584397764027636
2017-02-21 13:03:36 INFO  Loggers:81 - Session Attribute: 939615483317310584397764027636
2017-02-21 13:03:36 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:03:36 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:38 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:38 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:38 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:38 INFO  Loggers:81 - Module: Leave
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:38 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:38 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 13:03:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:38 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:38 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:38 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 13:03:38 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 13:03:39 INFO  Loggers:84 - End :: Object Received []
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 13:03:39 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:81 - Module: Leave
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 13:03:39 INFO  Loggers:84 - End :: Object Received []
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:39 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:39 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:39 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 13:03:39 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 13:03:39 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:03:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:43 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:43 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:03:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:03:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:03:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:03:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:43 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:43 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:03:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:03:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:03:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:03:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:03:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:03:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:03:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:03:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:03:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:03:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:03:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:03:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:03:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:03:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:05:45 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:05:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:05:45 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:05:45 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:05:45 INFO  Loggers:81 - Start :: Object Received 939615483317310584397764027636
2017-02-21 13:05:45 INFO  Loggers:86 - 
Token [
	TokenNumber=939615483317310584397764027636
	SmartID=null
	Role=null ]
2017-02-21 13:05:45 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:05:59 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:05:59 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:05:59 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:05:59 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:05:59 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:05:59 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:05:59 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:05:59 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:05:59 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:05:59 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:05:59 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:05:59 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:05:59 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:05:59 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:05:59 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:05:59 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:05:59 INFO  Loggers:81 - Token generated: 771325841735280965163840865750
2017-02-21 13:05:59 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:05:59 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:05:59 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=771325841735280965163840865750}
2017-02-21 13:05:59 INFO  Loggers:81 - Token Number771325841735280965163840865750
2017-02-21 13:05:59 INFO  Loggers:81 - Session Attribute: 771325841735280965163840865750
2017-02-21 13:05:59 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:05:59 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:06:04 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:04 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:04 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:04 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:06:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:06:04 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:06:04 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:06:04 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:04 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:04 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:04 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:06:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:04 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:06:04 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:06:04 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:06:04 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:06:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:06:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:06:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:06:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:06:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:06:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:06:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:06:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:06:15 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 13:06:15 INFO  Loggers:86 - com.gsmart.model.WeekDays@1ac02bd
2017-02-21 13:06:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:06:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:06:15 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 90
2017-02-21 13:06:15 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 13:06:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:07:00 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:00 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:07:00 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:07:00 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:07:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:07:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:07:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:07:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:07:00 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:07:00 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:07:00 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@26cd97
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:00 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:07:00 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:07:00 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:07:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:07:00 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:07:01 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:01 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:01 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:07:01 INFO  Loggers:60 - End :: Object Received null
2017-02-21 13:07:01 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:07:01 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:07:01 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:01 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:01 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/rolepermission/subModules
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:02 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:02 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:02 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/feeMaster/
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/feeMaster/
2017-02-21 13:07:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/fee/paidfee
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:07:15 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForPost() :: 78
2017-02-21 13:07:15 INFO  Loggers:78 - End :: Object Received false
2017-02-21 13:07:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/fee/paidfee
2017-02-21 13:07:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForPost() :: 78
2017-02-21 13:07:15 INFO  Loggers:78 - End :: Object Received false
2017-02-21 13:07:17 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:07:17 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:17 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:07:17 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:17 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:17 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:07:28 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:07:28 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:07:28 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:07:28 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:28 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:07:28 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:07:28 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:28 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:28 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:07:32 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:07:32 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:07:32 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:07:32 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:07:32 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:07:32 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:07:32 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:07:32 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:07:32 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:07:36 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 12:44:11 IST 2017]; root of context hierarchy
2017-02-21 13:07:36 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:07:36 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:07:36 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 13:07:36 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 13:07:36 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:07:36 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 13:07:57 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:07:57 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:07:57 IST 2017]; root of context hierarchy
2017-02-21 13:07:57 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:07:58 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:07:58 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:07:58 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:07:58 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:07:58 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:07:58 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:07:59 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:07:59 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:07:59 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:07:59 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:07:59 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:07:59 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:08:00 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:08:00 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:08:00 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:08:00 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:08:00 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:08:00 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:08:00 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:08:01 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:08:01 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:08:01 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:08:01 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:08:01 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:02 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:08:03 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:08:03 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:08:03 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:08:03 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:08:03 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:08:03 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:08:03 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:08:03 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:08:03 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@fb17f
2017-02-21 13:08:03 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:08:03 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:08:03 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:08:03 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 6815 ms
2017-02-21 13:08:22 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:08:22 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:08:22 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:08:22 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:22 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:08:22 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:08:23 INFO  Loggers:81 - User is already logged in
2017-02-21 13:08:23 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:08:23 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:08:24 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:08:24 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:08:24 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:08:24 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:08:24 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:08:24 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:08:24 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:08:24 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:08:24 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:08:24 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:08:24 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=771325841735280965163840865750}
2017-02-21 13:08:24 INFO  Loggers:81 - Token Number771325841735280965163840865750
2017-02-21 13:08:24 INFO  Loggers:81 - Session Attribute: 771325841735280965163840865750
2017-02-21 13:08:24 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:08:24 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:08:26 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:26 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:26 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:26 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:26 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:26 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:26 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:08:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:08:26 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:08:26 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:08:26 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:08:26 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:08:27 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:08:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:27 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:27 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:27 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:27 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:08:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:27 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:27 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:08:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:27 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:08:27 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:08:27 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:08:27 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:29 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:29 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:29 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:29 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:29 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:29 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:29 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:29 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:30 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:08:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:08:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:08:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:08:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:08:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:08:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayController.addHoliday() :: 109
2017-02-21 13:09:02 INFO  Loggers:86 - Holiday [holidayDate=Fri Feb 17 13:08:54 IST 2017, description=gh, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.addHoliday() :: 58
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.addHoliday() :: 90
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayDaoImpl.addHoliday() :: 121
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayServicesImpl.addHoliday() :: 69
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.addHoliday() :: 127
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:02 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:05 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:05 INFO  Loggers:81 - Module: ReportCard
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:05 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 13:09:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 13:09:05 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 13:09:05 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:05 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:05 INFO  Loggers:81 - Module: ReportCard
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:05 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:05 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 13:09:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 13:09:05 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 13:09:05 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 13:09:05 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:09:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:06 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:06 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:09:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:09:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:09:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:09:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:06 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:06 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:09:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:09:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:09:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:09:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:07 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:09:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:08 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:08 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:09:08 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:09:08 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:09:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:09:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:09:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:09:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:09:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:09:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:09:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:26 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 13:10:26 INFO  Loggers:86 - com.gsmart.model.WeekDays@bdff24
2017-02-21 13:10:26 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:10:26 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:10:26 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 40
2017-02-21 13:10:26 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 13:10:54 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:10:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:10:54 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:10:54 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:10:54 INFO  Loggers:81 - Start :: Object Received 771325841735280965163840865750
2017-02-21 13:10:54 INFO  Loggers:86 - 
Token [
	TokenNumber=771325841735280965163840865750
	SmartID=null
	Role=null ]
2017-02-21 13:10:54 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:10:56 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:10:56 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:10:56 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:10:56 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:10:56 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:10:56 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:10:56 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:10:56 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:10:56 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:10:56 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:10:56 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:10:56 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:10:56 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:10:56 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:10:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:56 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:10:56 INFO  Loggers:81 - Token generated: 973066854012009599499070293957
2017-02-21 13:10:56 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:10:56 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:10:56 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=973066854012009599499070293957}
2017-02-21 13:10:56 INFO  Loggers:81 - Token Number973066854012009599499070293957
2017-02-21 13:10:56 INFO  Loggers:81 - Session Attribute: 973066854012009599499070293957
2017-02-21 13:10:56 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:10:56 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:10:58 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:58 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:58 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:58 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:10:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:10:58 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:10:58 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:10:58 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:58 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:58 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:58 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:10:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:58 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:10:58 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:10:58 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:10:58 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:10:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:10:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:10:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:10:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:10:59 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:10:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:10:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:10:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:10:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:10:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:00 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:00 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:05 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 13:11:05 INFO  Loggers:86 - com.gsmart.model.WeekDays@1419494
2017-02-21 13:11:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:05 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 90
2017-02-21 13:11:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 13:11:05 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:11:10 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:10 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:10 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:10 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:11:10 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:10 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:11:10 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:11:10 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:11:10 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@41364b
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:10 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:10 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:10 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:11:10 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:10 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:10 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:10 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:11:10 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:11:10 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:11:10 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:11 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:11 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:11 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:11 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:11 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:12 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:12 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:12 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:12 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:12 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:12 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:12 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:12 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:12 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:12 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:12 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:12 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:47 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:52 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:52 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:52 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:52 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:53 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:53 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:53 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:53 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:53 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:53 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:53 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:53 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:53 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:11:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:11:56 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:11:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:11:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:11:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:11:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:11:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:13:18 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:13:18 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:13:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:13:18 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:13:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:13:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:13:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:13:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:13:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:13:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:13:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:13:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:13:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:13:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:13:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:13:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:13:19 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:19 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:13:19 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:13:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:13:19 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:13:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:13:19 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:13:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:13:19 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:19 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:19 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:19 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:19 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:19 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:19 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:19 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:19 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:13:23 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:23 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:23 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:23 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 13:13:28 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:13:28 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:28 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:13:28 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:28 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:28 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:13:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:13:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:13:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:13:45 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:45 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:13:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:13:45 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:45 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:45 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:13:48 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:13:48 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:13:48 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:13:48 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:13:48 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:13:48 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:13:48 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 13:13:48 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 13:13:48 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 13:14:08 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:07:57 IST 2017]; root of context hierarchy
2017-02-21 13:14:08 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:14:08 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:14:09 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 13:14:09 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 13:14:09 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:14:09 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 13:14:19 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:14:19 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:14:19 IST 2017]; root of context hierarchy
2017-02-21 13:14:19 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:14:19 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:14:19 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:14:20 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:14:20 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:14:20 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:14:20 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:14:20 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:14:20 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:14:21 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:14:21 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:14:21 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:14:21 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:14:21 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:14:21 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:14:21 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:14:21 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:14:21 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:14:21 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:14:21 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:14:21 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:14:21 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:14:21 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:14:21 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:14:21 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:14:21 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:14:21 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:14:21 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:14:21 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:14:21 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:14:21 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:14:21 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:14:21 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:14:21 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:14:21 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:14:21 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:14:22 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:14:22 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:14:22 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:14:22 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:14:22 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:14:23 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:14:23 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:14:23 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:14:23 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:14:23 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:14:23 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:14:23 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:14:23 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:14:23 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@14240f4
2017-02-21 13:14:23 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:14:23 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:14:23 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:14:23 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 4849 ms
2017-02-21 13:14:34 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:14:34 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:14:34 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:14:34 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:34 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:14:34 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:14:35 INFO  Loggers:81 - User is already logged in
2017-02-21 13:14:35 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:14:35 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:14:35 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:14:35 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:14:35 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:14:35 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:14:35 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:14:35 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:14:35 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:14:35 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:14:35 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:14:35 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:14:35 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=973066854012009599499070293957}
2017-02-21 13:14:35 INFO  Loggers:81 - Token Number973066854012009599499070293957
2017-02-21 13:14:35 INFO  Loggers:81 - Session Attribute: 973066854012009599499070293957
2017-02-21 13:14:35 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:14:35 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:14:37 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@912285
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:37 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:37 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:37 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:14:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:14:37 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:14:37 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:14:37 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@912285
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:37 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:37 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:37 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:14:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:37 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:14:37 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:14:37 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:14:37 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:14:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:14:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:14:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:14:41 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:14:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:14:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:14:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:14:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:14:53 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 13:14:53 INFO  Loggers:86 - com.gsmart.model.WeekDays@1f9afd8
2017-02-21 13:14:53 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:14:53 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:14:53 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 40
2017-02-21 13:14:53 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 13:15:16 INFO  Loggers:84 - feeList[]
2017-02-21 13:15:16 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 13:15:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:81 - Module: Fee
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 13:15:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 13:15:16 INFO  Loggers:81 - getting connections
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 13:15:16 INFO  Loggers:84 - feeList[]
2017-02-21 13:15:16 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 13:15:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:81 - Module: Fee
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:16 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:16 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 13:15:16 INFO  Loggers:81 - getting connections
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 13:15:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 13:15:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:15:16 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:15:17 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@912285
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:17 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:17 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:17 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:15:17 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:17 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:15:17 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:15:17 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:15:17 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@912285
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:17 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:17 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:17 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:15:17 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:17 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:17 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:15:17 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:15:17 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:15:17 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:15:18 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:15:18 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:15:18 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:15:18 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:18 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:15:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:15:18 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:15:19 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:19 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:15:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:15:19 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:15:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:15:19 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:15:19 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:15:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:19 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:15:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:15:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:15:19 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:15:19 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:15:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:15:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:15:19 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:15:19 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:27:54 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:14:19 IST 2017]; root of context hierarchy
2017-02-21 13:27:54 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:28:00 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:28:00 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:28:00 IST 2017]; root of context hierarchy
2017-02-21 13:28:00 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:28:01 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:28:01 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:28:01 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:28:01 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:28:01 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:28:01 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:28:02 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:28:03 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:28:03 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:28:03 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:28:03 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:28:03 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:28:04 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:28:04 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:28:04 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:28:04 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:28:04 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:28:04 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:28:04 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:28:04 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:05 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:28:06 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:28:06 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:28:06 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:28:06 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:28:06 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:28:06 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:28:06 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:28:06 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:28:06 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@cd4f65
2017-02-21 13:28:06 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:28:06 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:28:06 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:28:06 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5981 ms
2017-02-21 13:28:07 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:28:07 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:28:07 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:28:07 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:28:07 INFO  Loggers:81 - Start :: Object Received 973066854012009599499070293957
2017-02-21 13:28:07 INFO  Loggers:86 - 
Token [
	TokenNumber=973066854012009599499070293957
	SmartID=null
	Role=null ]
2017-02-21 13:28:07 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:28:19 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:28:19 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:28:19 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:28:19 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:28:19 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:28:19 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:28:19 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:28:19 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:28:19 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:28:19 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:28:19 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:28:19 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:28:19 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:28:19 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:28:19 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:19 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:28:19 INFO  Loggers:81 - Token generated: 114467346214099193128423458364
2017-02-21 13:28:19 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:28:19 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:28:19 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=114467346214099193128423458364}
2017-02-21 13:28:19 INFO  Loggers:81 - Token Number114467346214099193128423458364
2017-02-21 13:28:19 INFO  Loggers:81 - Session Attribute: 114467346214099193128423458364
2017-02-21 13:28:20 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:28:20 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:28:22 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:28:22 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d052e2
2017-02-21 13:28:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:22 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:22 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:22 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:22 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:28:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:22 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:22 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:28:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:28:23 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:28:23 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:28:23 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:28:23 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d052e2
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:23 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:23 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:23 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:23 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:23 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:23 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:28:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:23 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:28:23 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:28:23 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:28:23 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:28:26 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:28:26 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:28:26 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:28:26 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:28:26 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:28:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:28:26 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:28:26 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:28:26 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:16 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:28:00 IST 2017]; root of context hierarchy
2017-02-21 13:30:16 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:30:23 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:30:23 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:30:23 IST 2017]; root of context hierarchy
2017-02-21 13:30:23 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:30:24 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:30:25 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:30:26 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:30:26 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:30:26 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:30:26 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:30:27 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:30:27 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:30:27 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:30:27 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:30:27 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:30:27 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:30:28 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:30:28 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:30:28 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:30:29 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:30:29 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:30:29 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:30:29 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:30:29 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:30 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:30:31 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:30:31 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:30:31 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:30:32 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:30:32 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:30:32 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:30:32 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:30:32 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:30:32 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1a0d5ff
2017-02-21 13:30:32 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:30:32 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:30:32 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:30:32 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 8549 ms
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:30:48 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:30:48 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:30:48 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:30:48 INFO  Loggers:81 - User is already logged in
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:30:48 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:30:48 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:30:48 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:30:48 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:30:48 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:30:48 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:30:48 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:30:48 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:30:48 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:30:48 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:30:48 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=114467346214099193128423458364}
2017-02-21 13:30:48 INFO  Loggers:81 - Token Number114467346214099193128423458364
2017-02-21 13:30:48 INFO  Loggers:81 - Session Attribute: 114467346214099193128423458364
2017-02-21 13:30:48 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:30:48 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:30:50 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:50 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:50 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:50 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:30:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:30:50 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:30:50 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:30:50 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:50 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:50 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:50 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:30:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:50 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:30:50 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:30:50 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:30:50 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:30:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:30:54 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:30:54 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:30:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:30:54 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:30:54 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:30:54 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:29 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 103
2017-02-21 13:31:29 INFO  Loggers:86 - com.gsmart.model.WeekDays@e6ee0
2017-02-21 13:31:29 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:31:29 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:31:29 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 40
2017-02-21 13:31:29 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 13:31:29 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 13:31:29 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 2) already exists.
2017-02-21 13:31:29 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 13:31:29 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 13:31:29 INFO  Loggers:105 - End :: WeekDaysServiceImpl.addWeekDaysList() :: 70
2017-02-21 13:31:29 INFO  Loggers:105 - End :: WeekDayController.addWeekDays() :: 121
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:81 - Module: Fee
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 13:31:37 INFO  Loggers:84 - feeList[]
2017-02-21 13:31:37 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 13:31:37 INFO  Loggers:81 - getting connections
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 13:31:37 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 13:31:37 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 13:31:37 INFO  Loggers:84 - feeList[]
2017-02-21 13:31:37 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:81 - Module: Fee
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:37 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:37 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 13:31:37 INFO  Loggers:81 - getting connections
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 13:31:37 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 13:31:37 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 13:31:37 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:31:38 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:38 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:38 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:38 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:31:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:31:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:31:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:31:38 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:38 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:38 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:38 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:31:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:31:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:31:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:31:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:31:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:31:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:31:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:31:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:39 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:31:39 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:31:39 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:31:40 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:40 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:31:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:31:40 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:31:40 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:31:40 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:31:40 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:31:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:40 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:31:40 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:31:40 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:31:40 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:31:40 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:31:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:31:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:31:40 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:31:40 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:15 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:32:15 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:32:15 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:32:15 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:32:15 INFO  Loggers:81 - Start :: Object Received 114467346214099193128423458364
2017-02-21 13:32:15 INFO  Loggers:86 - 
Token [
	TokenNumber=114467346214099193128423458364
	SmartID=null
	Role=null ]
2017-02-21 13:32:15 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:32:25 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:32:25 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:32:25 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:32:25 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:32:25 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:32:25 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:32:25 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:32:25 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:32:25 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:32:25 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:32:25 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:32:25 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:32:25 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:32:25 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:32:25 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:25 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:32:25 INFO  Loggers:81 - Token generated: 430142929484148378790697914192
2017-02-21 13:32:25 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:32:25 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:32:25 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=430142929484148378790697914192}
2017-02-21 13:32:25 INFO  Loggers:81 - Token Number430142929484148378790697914192
2017-02-21 13:32:25 INFO  Loggers:81 - Session Attribute: 430142929484148378790697914192
2017-02-21 13:32:25 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:32:25 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:32:30 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:30 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:30 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:30 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:32:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:32:30 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:32:30 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:32:30 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@11fc8bd
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:30 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:30 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:30 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:32:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:30 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:32:30 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:32:30 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:32:30 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:32:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:32:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:32:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:32:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:32:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:32:50 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:32:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:32:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:32:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:32:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:32:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:37:07 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 13:37:07 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:37:07 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 13:37:08 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 13:37:08 INFO  Loggers:81 - Start :: Object Received 430142929484148378790697914192
2017-02-21 13:37:08 INFO  Loggers:86 - 
Token [
	TokenNumber=430142929484148378790697914192
	SmartID=null
	Role=null ]
2017-02-21 13:37:08 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 13:37:32 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:30:23 IST 2017]; root of context hierarchy
2017-02-21 13:37:32 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:37:44 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:37:44 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:37:44 IST 2017]; root of context hierarchy
2017-02-21 13:37:44 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:37:46 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:37:46 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:37:46 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:37:46 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:37:46 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:37:46 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:37:47 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:37:47 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:37:47 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:37:47 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:37:47 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:37:47 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:37:48 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:37:48 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:37:48 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:37:48 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:37:48 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:37:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:37:48 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:37:49 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:37:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:37:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:37:49 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:37:49 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:37:50 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:37:50 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:37:50 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:37:50 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:37:50 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:37:50 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:37:50 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:37:50 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:37:50 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@f5735e
2017-02-21 13:37:50 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:37:50 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:37:50 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:37:50 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5732 ms
2017-02-21 13:38:06 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:37:44 IST 2017]; root of context hierarchy
2017-02-21 13:38:06 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:38:06 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:38:06 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 13:38:06 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 13:38:06 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:38:06 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 13:38:23 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:38:23 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:38:23 IST 2017]; root of context hierarchy
2017-02-21 13:38:23 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:38:24 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:38:24 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:38:24 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:38:25 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:38:25 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:38:25 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:38:25 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:38:25 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:38:26 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:38:26 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:38:26 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:38:26 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:38:27 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:38:27 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:38:27 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:38:27 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:38:27 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:38:27 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:38:27 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:38:28 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:38:28 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:38:28 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:38:28 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:38:28 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:38:29 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:38:30 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:38:30 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:38:30 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:38:30 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:38:30 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:38:30 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:38:30 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:38:30 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@46627a
2017-02-21 13:38:30 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:38:30 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:38:30 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:38:30 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 6950 ms
2017-02-21 13:38:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 13:38:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:38:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 13:38:40 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 13:38:40 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 13:38:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 13:38:40 INFO  Loggers:81 - Authenticationg the user
2017-02-21 13:38:41 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 13:38:41 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 13:38:41 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 13:38:41 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 13:38:41 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 13:38:41 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 13:38:41 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 13:38:41 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 13:38:41 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 13:38:41 INFO  Loggers:66 - given modules size is : 10
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 13:38:41 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 13:38:41 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 13:38:41 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 13:38:41 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 13:38:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:41 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 13:38:41 INFO  Loggers:81 - Token generated: 1204608661554847959742663435965
2017-02-21 13:38:41 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 13:38:41 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 13:38:41 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1204608661554847959742663435965}
2017-02-21 13:38:41 INFO  Loggers:81 - Token Number1204608661554847959742663435965
2017-02-21 13:38:41 INFO  Loggers:81 - Session Attribute: 1204608661554847959742663435965
2017-02-21 13:38:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:38:42 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:38:44 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@17ff9fa
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:44 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:38:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:38:44 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:38:44 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 13:38:44 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@17ff9fa
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:44 INFO  Loggers:81 - Module: RolePermission
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 13:38:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:44 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 13:38:44 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 13:38:44 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 13:38:44 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:38:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 13:38:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:81 - Module: Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 13:38:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 13:38:47 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 13:38:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 13:38:47 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:38:47 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 13:38:47 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 13:40:41 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:38:23 IST 2017]; root of context hierarchy
2017-02-21 13:40:41 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:40:48 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:40:48 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:40:48 IST 2017]; root of context hierarchy
2017-02-21 13:40:48 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:40:49 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:40:49 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:40:49 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:40:49 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:40:49 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:40:49 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:40:50 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:40:50 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:40:50 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:40:50 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:40:50 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:40:50 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:40:51 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:40:51 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:40:51 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:40:51 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:40:51 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:40:51 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:40:51 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:40:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:40:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:40:52 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:40:52 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:40:52 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:40:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:40:52 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:40:52 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:40:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:40:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:40:52 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:40:52 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:40:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:40:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:40:52 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:40:52 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:52 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:40:53 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:40:53 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:40:53 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:40:53 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:40:53 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:40:53 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:40:53 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:40:53 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:40:53 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@15846e1
2017-02-21 13:40:53 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:40:53 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:40:53 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:40:53 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 4961 ms
2017-02-21 13:40:56 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:40:48 IST 2017]; root of context hierarchy
2017-02-21 13:40:56 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 13:40:56 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:40:56 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 13:40:56 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 13:40:56 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 13:40:56 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 13:41:08 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 13:41:08 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:41:08 IST 2017]; root of context hierarchy
2017-02-21 13:41:08 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 13:41:09 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 13:41:09 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 13:41:09 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 13:41:09 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 13:41:09 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 13:41:09 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 13:41:10 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 13:41:10 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 13:41:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 13:41:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 13:41:10 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 13:41:10 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 13:41:11 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 13:41:11 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 13:41:11 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 13:41:11 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 13:41:11 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 13:41:11 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 13:41:11 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 13:41:12 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 13:41:12 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 13:41:12 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 13:41:12 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 13:41:12 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 13:41:13 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 13:41:13 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 13:41:14 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 13:41:14 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 13:41:14 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 13:41:14 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 13:41:14 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 13:41:14 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 13:41:14 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@19198f2
2017-02-21 13:41:14 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 13:41:14 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 13:41:14 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 13:41:14 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5449 ms
2017-02-21 15:08:49 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:08:49 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:08:49 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:08:49 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:08:49 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:08:49 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:08:50 INFO  Loggers:81 - User is already logged in
2017-02-21 15:08:50 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:08:50 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:08:50 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:08:50 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:08:50 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:08:50 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:08:50 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:08:50 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:08:50 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:08:50 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:08:50 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:08:50 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:08:50 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=1204608661554847959742663435965}
2017-02-21 15:08:50 INFO  Loggers:81 - Token Number1204608661554847959742663435965
2017-02-21 15:08:50 INFO  Loggers:81 - Session Attribute: 1204608661554847959742663435965
2017-02-21 15:08:50 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:08:50 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:12:05 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:05 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:05 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:05 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:05 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:05 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:05 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:06 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:06 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=null
	Role=null ]
2017-02-21 15:12:06 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:06 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:06 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:06 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:06 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:06 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=null
	Role=null ]
2017-02-21 15:12:07 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=null
	Role=null ]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:07 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:07 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:07 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:07 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:07 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:07 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:07 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:15 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:81 - Module: Leave
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:15 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:12:15 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:12:15 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:12:15 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:12:15 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:12:15 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:12:15 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:12:15 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:81 - Module: Leave
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:14:42 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:81 - Module: Leave
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:14:42 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:14:42 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:42 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:42 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:42 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:14:42 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:14:42 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: LeaveController.getLeftLeaves() :: 142
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:44 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:44 INFO  Loggers:81 - Module: Leave
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:44 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:44 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:14:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterByType() :: 166
2017-02-21 15:14:44 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaves() :: 204
2017-02-21 15:14:44 INFO  Loggers:105 - End :: LeaveController.getLeftLeaves() :: 158
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:81 - Module: Leave
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:14:52 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:81 - Module: Leave
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:14:52 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-21 15:14:52 INFO  Loggers:84 - End :: Object Received []
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:81 - Module: LeaveMaster
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:14:52 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:14:52 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:14:52 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:14:52 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-21 15:14:52 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-21 15:14:52 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-21 15:16:14 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 15:16:14 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:16:14 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 15:16:14 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 15:16:14 INFO  Loggers:81 - Start :: Object Received 1204608661554847959742663435965
2017-02-21 15:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=1204608661554847959742663435965
	SmartID=null
	Role=null ]
2017-02-21 15:16:14 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:16:33 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:16:33 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:16:33 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:16:33 INFO  Loggers:81 - Authenticationg the user
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 15:16:33 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 15:16:33 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:16:33 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:16:33 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:16:33 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:16:33 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:16:33 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:16:33 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:16:33 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:16:33 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 15:16:33 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:33 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 15:16:33 INFO  Loggers:81 - Token generated: 73433291134557968759440205246
2017-02-21 15:16:33 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:16:33 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:16:33 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=73433291134557968759440205246}
2017-02-21 15:16:33 INFO  Loggers:81 - Token Number73433291134557968759440205246
2017-02-21 15:16:33 INFO  Loggers:81 - Session Attribute: 73433291134557968759440205246
2017-02-21 15:16:33 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:16:33 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:16:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1dca9fb
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:16:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:16:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:16:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:16:45 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1dca9fb
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:45 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:16:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:45 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:16:45 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:16:45 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:16:45 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:16:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:16:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:16:50 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:16:50 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:16:50 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:16:50 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:16:50 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:16:50 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:16:50 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:17:58 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 15:17:58 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:17:58 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 15:17:58 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 15:17:58 INFO  Loggers:81 - Start :: Object Received 73433291134557968759440205246
2017-02-21 15:17:58 INFO  Loggers:86 - 
Token [
	TokenNumber=73433291134557968759440205246
	SmartID=null
	Role=null ]
2017-02-21 15:17:58 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:18:10 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:18:10 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:18:10 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:18:10 INFO  Loggers:81 - Authenticationg the user
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 15:18:10 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 15:18:10 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:18:10 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:18:10 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:18:10 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:18:10 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:18:10 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:18:10 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:18:10 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:18:10 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 15:18:10 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:10 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 15:18:10 INFO  Loggers:81 - Token generated: 200731429131422082393813747433
2017-02-21 15:18:10 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:18:10 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:18:10 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=200731429131422082393813747433}
2017-02-21 15:18:10 INFO  Loggers:81 - Token Number200731429131422082393813747433
2017-02-21 15:18:10 INFO  Loggers:81 - Session Attribute: 200731429131422082393813747433
2017-02-21 15:18:11 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:18:11 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:18:14 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1dca9fb
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:14 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:14 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:14 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:18:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:18:14 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:18:14 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:18:14 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1dca9fb
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:14 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:14 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:14 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:18:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:14 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:18:14 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:18:14 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:18:14 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:18:17 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:18:17 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:18:17 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:18:17 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:18:17 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:18:17 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:17 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:17 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:18:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:18:18 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:18:18 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:18:18 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:18 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:18:18 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:18:18 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:18:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:18:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:18:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:18:18 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:18:18 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:18:18 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:23:27 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 13:41:08 IST 2017]; root of context hierarchy
2017-02-21 15:23:28 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 15:23:45 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 15:23:45 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:23:45 IST 2017]; root of context hierarchy
2017-02-21 15:23:45 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 15:23:46 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 15:23:46 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 15:23:46 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 15:23:46 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 15:23:46 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 15:23:46 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 15:23:47 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 15:23:47 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 15:23:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 15:23:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 15:23:48 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 15:23:48 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 15:23:49 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 15:23:49 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 15:23:49 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 15:23:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 15:23:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 15:23:49 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 15:23:49 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 15:23:50 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 15:23:50 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 15:23:50 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:23:50 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 15:23:50 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:23:52 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 15:23:52 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 15:23:52 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 15:23:52 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 15:23:52 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 15:23:52 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 15:23:52 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 15:23:52 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 15:23:52 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@11bf0bf
2017-02-21 15:23:52 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 15:23:52 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 15:23:52 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 15:23:52 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 7680 ms
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:23:59 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:23:59 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:23:59 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:23:59 INFO  Loggers:81 - User is already logged in
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:23:59 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:23:59 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:23:59 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:23:59 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:23:59 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:23:59 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:23:59 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:23:59 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:23:59 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:23:59 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:23:59 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=200731429131422082393813747433}
2017-02-21 15:23:59 INFO  Loggers:81 - Token Number200731429131422082393813747433
2017-02-21 15:23:59 INFO  Loggers:81 - Session Attribute: 200731429131422082393813747433
2017-02-21 15:24:00 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:24:00 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:06 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:06 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:07 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:07 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:07 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:17 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 15:24:17 INFO  Loggers:86 - com.gsmart.model.WeekDays@fa2112
2017-02-21 15:24:17 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:24:17 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:24:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 40
2017-02-21 15:24:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:24:20 INFO  Loggers:84 - feeList[]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:81 - Module: Fee
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:20 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:24:20 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:24:20 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:24:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:24:20 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:24:20 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:24:20 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:24:21 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:24:21 INFO  Loggers:84 - feeList[]
2017-02-21 15:24:21 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:24:21 INFO  Loggers:81 - getting connections
2017-02-21 15:24:21 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:24:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:24:21 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:81 - Module: Fee
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:24:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:24:21 INFO  Loggers:81 - getting connections
2017-02-21 15:24:21 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:24:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:24:21 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:22 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:22 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:22 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:22 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:24 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:24 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:24 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:24 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:24 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:24 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:24 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:29 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:24:29 INFO  Loggers:86 - com.gsmart.model.WeekDays@57a486
2017-02-21 15:24:29 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:29 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:29 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 90
2017-02-21 15:24:29 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:24:29 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:31 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:31 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:31 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:24:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:24:31 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:24:31 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:31 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:31 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:31 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:31 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:24:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:24:31 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:24:31 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:24:31 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:32 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:32 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:32 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:32 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:24:32 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@db5f23
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:32 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:24:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:32 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:24:32 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:24:32 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:24:32 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:35 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:24:35 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:35 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:35 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:35 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:24:36 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:24:36 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:24:36 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:36 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:24:36 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:24:36 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:24:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:24:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:24:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:24:36 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:24:36 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:24:36 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:34:53 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:23:45 IST 2017]; root of context hierarchy
2017-02-21 15:34:53 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 15:35:33 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 15:35:33 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:35:33 IST 2017]; root of context hierarchy
2017-02-21 15:35:33 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 15:35:34 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 15:35:34 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 15:35:35 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 15:35:35 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 15:35:35 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 15:35:35 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 15:35:36 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 15:35:36 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 15:35:37 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 15:35:37 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 15:35:37 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 15:35:37 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 15:35:38 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 15:35:38 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 15:35:38 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 15:35:38 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 15:35:38 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 15:35:38 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 15:35:38 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 15:35:39 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 15:35:39 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 15:35:39 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:35:39 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 15:35:39 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:35:40 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 15:35:40 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 15:35:40 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 15:35:40 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 15:35:40 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 15:35:40 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 15:35:40 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 15:35:40 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 15:35:40 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@c9fe01
2017-02-21 15:35:40 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 15:35:40 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 15:35:40 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 15:35:41 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 7202 ms
2017-02-21 15:35:53 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:35:53 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:35:53 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:35:53 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:35:53 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:35:53 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:35:54 INFO  Loggers:81 - User is already logged in
2017-02-21 15:35:54 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:35:54 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:35:54 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:35:54 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:35:54 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:35:54 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:35:54 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:35:54 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:35:54 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:35:54 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:35:54 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:35:54 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:35:54 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=200731429131422082393813747433}
2017-02-21 15:35:54 INFO  Loggers:81 - Token Number200731429131422082393813747433
2017-02-21 15:35:54 INFO  Loggers:81 - Session Attribute: 200731429131422082393813747433
2017-02-21 15:35:54 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:35:55 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:36:00 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:00 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:00 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:00 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:36:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:36:00 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:36:00 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:36:00 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:00 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:00 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:00 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:36:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:00 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:36:00 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:36:00 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:36:00 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:03 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:03 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:03 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:03 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:03 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:03 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:03 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:03 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:03 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:03 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:03 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:03 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:03 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:04 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:04 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:04 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:04 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:04 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:04 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:04 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:04 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:04 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:06 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:06 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:06 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:17 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 15:36:17 INFO  Loggers:86 - com.gsmart.model.WeekDays@e40e57
2017-02-21 15:36:17 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:36:17 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:36:17 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 15:36:17 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:21 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:36:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:36:21 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:36:21 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:21 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:21 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:36:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:36:21 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:36:21 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:36:21 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:36:22 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:22 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:22 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:22 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:36:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:36:22 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:36:22 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:36:22 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:22 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:22 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:22 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:36:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:22 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:36:22 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:36:22 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:36:22 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:36:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:36:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:36:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:36:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:36:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:36:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:36:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:81 - Module: Fee
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:40:21 INFO  Loggers:84 - feeList[]
2017-02-21 15:40:21 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:40:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:40:21 INFO  Loggers:81 - getting connections
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:40:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:40:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:81 - Module: Fee
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:21 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:40:21 INFO  Loggers:84 - feeList[]
2017-02-21 15:40:21 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:21 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:40:21 INFO  Loggers:81 - getting connections
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:40:21 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:40:21 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:40:21 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:40:23 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:23 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:23 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:23 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:40:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:40:23 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:40:23 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:40:23 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:23 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:23 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:23 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:40:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:23 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:40:23 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:40:23 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:40:23 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:40:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:40:25 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:40:25 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:40:25 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:40:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:40:25 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:40:25 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:40:25 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:32 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:32 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:32 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:32 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:32 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:32 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:32 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:32 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayController.addHoliday() :: 109
2017-02-21 15:42:42 INFO  Loggers:86 - Holiday [holidayDate=Tue Feb 07 15:42:32 IST 2017, description=ppp, entryTime=null, exitTime=null, updatedTime=null, isActive=null]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayServicesImpl.addHoliday() :: 58
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayDaoImpl.addHoliday() :: 90
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayDaoImpl.addHoliday() :: 121
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayServicesImpl.addHoliday() :: 69
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.addHoliday() :: 127
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:42 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:42 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:42 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:42 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:42 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:42 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:42:46 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:42:46 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:81 - Module: Fee
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:42:46 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:42:46 INFO  Loggers:81 - getting connections
2017-02-21 15:42:46 INFO  Loggers:84 - feeList[]
2017-02-21 15:42:46 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:42:46 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:81 - Module: Fee
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:46 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:46 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:42:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:42:46 INFO  Loggers:81 - getting connections
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:42:46 INFO  Loggers:84 - feeList[]
2017-02-21 15:42:46 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:42:46 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:42:46 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:42:46 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:42:48 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:48 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:48 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:48 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:42:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:42:48 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:42:48 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:42:48 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:48 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:48 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:48 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:42:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:48 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:42:48 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:42:48 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:42:48 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:42:49 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:42:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:42:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:42:49 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:42:49 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:42:49 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:42:49 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:42:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:42:49 INFO  Loggers:60 - End :: Object Received null
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:42:49 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:42:49 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:42:49 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:42:49 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:43:38 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:43:38 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:43:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:43:38 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/reportCard/
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:43:38 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:43:38 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:43:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:43:38 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/reportCard/
2017-02-21 15:43:39 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:43:39 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:43:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:43:39 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:43:39 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:39 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:43:39 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:43:39 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/rolepermission/subModules
2017-02-21 15:43:40 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:43:40 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:43:40 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:43:40 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:40 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:43:40 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:43:40 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:43:40 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:43:40 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/rolepermission/subModules
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:44:22 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:44:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:44:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:44:22 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:44:22 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:44:22 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/rolepermission/subModules
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:44:22 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@31cc0e
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:44:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:44:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:44:22 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:44:22 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:44:22 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:44:22 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/rolepermission/subModules
2017-02-21 15:44:33 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:35:33 IST 2017]; root of context hierarchy
2017-02-21 15:44:33 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 15:44:33 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:44:33 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 15:44:33 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 15:44:33 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:44:33 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 15:44:52 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 15:44:52 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:44:52 IST 2017]; root of context hierarchy
2017-02-21 15:44:52 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 15:44:53 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 15:44:53 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 15:44:54 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 15:44:54 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 15:44:54 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 15:44:54 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 15:44:55 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 15:44:55 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 15:44:56 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 15:44:56 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 15:44:56 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 15:44:56 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 15:44:56 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 15:44:56 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 15:44:56 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 15:44:56 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 15:44:56 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 15:44:56 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 15:44:56 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 15:44:56 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 15:44:56 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 15:44:56 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 15:44:56 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 15:44:56 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 15:44:56 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 15:44:57 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 15:44:57 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 15:44:57 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:44:57 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 15:44:57 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:58 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:44:59 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 15:44:59 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 15:44:59 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 15:44:59 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 15:44:59 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 15:44:59 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 15:44:59 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 15:44:59 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 15:44:59 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@ca64ed
2017-02-21 15:44:59 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 15:44:59 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 15:44:59 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 15:44:59 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 7906 ms
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 15:45:01 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 15:45:01 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:45:01 INFO  Loggers:86 - 
Token [
	TokenNumber=200731429131422082393813747433
	SmartID=null
	Role=null ]
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:45:01 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:45:01 INFO  Loggers:81 - Start :: Object Received 200731429131422082393813747433
2017-02-21 15:45:01 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:45:01 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:45:02 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 15:45:03 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:45:20 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:44:52 IST 2017]; root of context hierarchy
2017-02-21 15:45:20 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 15:45:20 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:45:20 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 15:45:20 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 15:45:20 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:45:20 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 15:45:32 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 15:45:32 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:45:32 IST 2017]; root of context hierarchy
2017-02-21 15:45:32 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 15:45:33 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 15:45:33 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 15:45:34 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 15:45:34 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 15:45:34 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 15:45:34 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 15:45:34 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 15:45:34 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 15:45:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 15:45:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 15:45:35 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 15:45:35 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 15:45:36 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 15:45:36 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 15:45:36 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 15:45:36 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 15:45:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 15:45:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 15:45:36 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 15:45:37 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 15:45:37 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 15:45:37 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:45:37 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 15:45:37 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:45:38 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 15:45:38 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 15:45:38 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 15:45:38 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 15:45:38 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 15:45:38 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 15:45:38 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 15:45:38 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 15:45:38 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@688a58
2017-02-21 15:45:39 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 15:45:39 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 15:45:39 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 15:45:39 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 6552 ms
2017-02-21 15:46:11 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:46:11 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:46:11 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:46:11 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 15:46:11 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:46:11 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:46:11 INFO  Loggers:81 - Authenticationg the user
2017-02-21 15:46:11 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 15:46:12 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 15:46:12 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 15:46:12 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:46:12 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:46:12 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:46:12 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:46:12 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:46:12 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:46:12 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:46:12 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:46:12 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:46:12 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:46:12 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 15:46:12 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:12 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 15:46:12 INFO  Loggers:81 - Token generated: 884768014250149965109602675534
2017-02-21 15:46:12 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:46:12 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:46:12 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=884768014250149965109602675534}
2017-02-21 15:46:12 INFO  Loggers:81 - Token Number884768014250149965109602675534
2017-02-21 15:46:12 INFO  Loggers:81 - Session Attribute: 884768014250149965109602675534
2017-02-21 15:46:13 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:46:13 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:46:16 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:16 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:46:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:46:16 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:46:16 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:46:16 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:16 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:46:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:16 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:46:16 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:46:16 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:46:16 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:22 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:22 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:22 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:46:22 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:46:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:46:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:46:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:46:23 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:46:23 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:46:23 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:46:23 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:46:23 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:46:23 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:46:23 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:47:13 INFO  Loggers:86 - com.gsmart.model.WeekDays@1b087dc
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:13 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:47:13 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:47:13 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:47:13 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:47:13 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:13 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:13 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:47:16 INFO  Loggers:84 - feeList[]
2017-02-21 15:47:16 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:81 - Module: Fee
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:47:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:47:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:47:16 INFO  Loggers:84 - feeList[]
2017-02-21 15:47:16 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:47:16 INFO  Loggers:81 - getting connections
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:47:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:81 - Module: Fee
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:16 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:16 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:16 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:47:16 INFO  Loggers:81 - getting connections
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:47:16 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:47:16 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:16 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:47:17 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:17 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:17 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:17 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:17 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:17 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:17 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:47:17 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:17 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:17 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:17 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:47:17 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:47:17 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:47:18 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:47:18 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:18 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:18 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:18 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:18 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:18 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:18 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:47:18 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:18 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:18 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:18 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:47:18 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:47:18 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:47:18 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:19 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:19 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:19 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:19 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:19 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:19 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:19 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:19 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:19 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:19 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:20 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:20 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:20 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:20 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:20 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:20 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:20 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:20 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:20 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:47:27 INFO  Loggers:86 - com.gsmart.model.WeekDays@1fc5f80
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:27 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:47:27 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:47:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:47:27 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:47:27 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:47:36 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:81 - Module: Fee
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:47:36 INFO  Loggers:84 - feeList[]
2017-02-21 15:47:36 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:47:36 INFO  Loggers:81 - getting connections
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:47:36 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:47:36 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:81 - Module: Fee
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:36 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:36 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:47:36 INFO  Loggers:84 - feeList[]
2017-02-21 15:47:36 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:47:36 INFO  Loggers:81 - getting connections
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:47:36 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:47:36 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:47:36 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:47:39 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:39 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:39 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:39 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:47:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:47:39 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:47:39 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:47:39 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:39 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:39 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:39 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:47:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:39 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:47:39 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:47:39 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:47:39 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:47:41 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:47:41 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:47:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:47:41 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:47:41 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:47:41 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:31 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:48:31 INFO  Loggers:86 - com.gsmart.model.WeekDays@ec50b7
2017-02-21 15:48:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:31 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:48:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:48:31 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:48:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:48:31 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:48:31 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:48:32 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:48:32 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:48:32 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:48:32 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:48:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:48:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:48:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:48:43 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:43 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:43 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:48:43 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:43 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:48:43 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:48:46 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 15:48:46 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:46 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 15:48:46 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 15:48:46 INFO  Loggers:81 - Start :: Object Received 884768014250149965109602675534
2017-02-21 15:48:46 INFO  Loggers:86 - 
Token [
	TokenNumber=884768014250149965109602675534
	SmartID=null
	Role=null ]
2017-02-21 15:48:46 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:48:54 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:48:54 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:48:54 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:48:54 INFO  Loggers:81 - Authenticationg the user
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 15:48:54 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 15:48:54 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:48:54 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:48:54 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:48:54 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:48:54 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:48:54 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:48:54 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:48:54 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:48:54 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 15:48:54 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:54 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 15:48:54 INFO  Loggers:81 - Token generated: 463772170825574568249995107714
2017-02-21 15:48:54 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:48:54 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:48:54 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=463772170825574568249995107714}
2017-02-21 15:48:54 INFO  Loggers:81 - Token Number463772170825574568249995107714
2017-02-21 15:48:54 INFO  Loggers:81 - Session Attribute: 463772170825574568249995107714
2017-02-21 15:48:54 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:48:54 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:48:57 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:57 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:57 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:48:57 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:57 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:57 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:57 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:48:57 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:57 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:57 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:57 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:48:57 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:48:58 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:48:58 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:48:58 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:48:58 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:48:58 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:48:58 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:58 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:48:58 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:48:58 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:48:58 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:48:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:58 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:48:58 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:48:58 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:48:58 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:48:58 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:48:58 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:49:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:02 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:49:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:49:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:49:07 INFO  Loggers:86 - com.gsmart.model.WeekDays@b835c2
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:49:07 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:49:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:49:07 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:49:07 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:49:31 INFO  Loggers:86 - com.gsmart.model.WeekDays@c96802
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:31 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:49:31 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:49:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:49:31 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:49:31 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:49:34 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:81 - Module: Fee
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:49:34 INFO  Loggers:84 - feeList[]
2017-02-21 15:49:34 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:49:34 INFO  Loggers:81 - getting connections
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:49:34 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:81 - Module: Fee
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:49:34 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:49:34 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:34 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:34 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:34 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:49:34 INFO  Loggers:81 - getting connections
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:49:34 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:49:34 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:49:34 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:49:34 INFO  Loggers:84 - feeList[]
2017-02-21 15:49:34 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:49:36 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:36 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:36 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:36 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:49:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:49:36 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:49:36 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:49:36 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1063b2b
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:36 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:36 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:36 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:49:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:36 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:49:36 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:49:36 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:49:36 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:49:37 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:37 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:37 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:37 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:37 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:49:37 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:49:37 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:49:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:49:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:49:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:37 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:37 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:37 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:37 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:37 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:37 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:37 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:37 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:37 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:37 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:38 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:38 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:38 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:49:38 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:49:38 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:38 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:38 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:38 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/holiday/
2017-02-21 15:49:43 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 15:49:43 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:43 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 15:49:43 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:43 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:43 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:49:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:49:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:49:45 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:49:45 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:45 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:49:45 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:49:45 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:45 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:45 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:49:47 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:49:47 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:49:47 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:49:47 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:49:47 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:49:47 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:49:47 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:49:47 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:49:47 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:50:11 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:50:11 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:11 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:50:11 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:11 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:50:11 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:11 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:50:11 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:50:11 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:50:15 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:50:15 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:15 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:50:15 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:15 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:50:15 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:15 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-21 15:50:15 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-21 15:50:15 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/login
2017-02-21 15:50:30 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:45:32 IST 2017]; root of context hierarchy
2017-02-21 15:50:30 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 15:50:30 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:50:30 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 15:50:30 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 15:50:30 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 15:50:30 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 15:50:43 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 15:50:43 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:50:43 IST 2017]; root of context hierarchy
2017-02-21 15:50:43 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 15:50:44 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 15:50:44 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 15:50:44 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 15:50:44 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 15:50:44 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 15:50:44 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 15:50:45 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 15:50:45 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 15:50:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 15:50:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 15:50:46 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 15:50:46 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 15:50:47 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 15:50:47 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 15:50:47 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 15:50:47 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 15:50:47 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 15:50:47 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 15:50:47 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 15:50:48 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 15:50:48 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 15:50:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:50:48 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 15:50:48 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 15:50:48 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 15:50:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:50:48 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 15:50:48 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 15:50:48 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 15:50:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 15:50:48 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 15:50:48 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:48 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:49 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 15:50:49 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 15:50:49 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 15:50:50 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 15:50:50 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 15:50:50 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 15:50:50 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 15:50:50 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 15:50:50 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 15:50:50 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6b789b
2017-02-21 15:50:50 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 15:50:50 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 15:50:50 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 15:50:50 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 6976 ms
2017-02-21 15:50:51 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 15:50:51 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:51 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 15:50:51 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:51 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 15:50:51 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 15:50:52 INFO  Loggers:81 - User is already logged in
2017-02-21 15:50:52 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 15:50:52 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 15:50:52 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 15:50:52 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 15:50:52 INFO  Loggers:66 - given modules size is : 10
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 15:50:52 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 15:50:52 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 15:50:52 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 15:50:52 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 15:50:52 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 15:50:52 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 15:50:52 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 15:50:52 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=463772170825574568249995107714}
2017-02-21 15:50:52 INFO  Loggers:81 - Token Number463772170825574568249995107714
2017-02-21 15:50:52 INFO  Loggers:81 - Session Attribute: 463772170825574568249995107714
2017-02-21 15:50:53 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:50:53 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:50:55 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:55 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:50:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:50:55 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:50:55 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:50:55 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:55 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:50:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:55 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:50:55 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:50:55 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:50:55 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:58 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:58 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:58 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:58 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:50:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:50:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:50:59 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:50:59 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:50:59 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:50:59 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:50:59 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:50:59 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:51:03 INFO  Loggers:86 - com.gsmart.model.WeekDays@13c908
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:03 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:51:03 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:51:03 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:51:03 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:51:03 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:51:03 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:51:03 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:05 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:05 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:51:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:51:05 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:51:05 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:51:05 INFO  Loggers:84 - feeList[]
2017-02-21 15:51:05 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:81 - Module: Fee
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:51:06 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:51:06 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:51:06 INFO  Loggers:81 - getting connections
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:51:06 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:51:06 INFO  Loggers:84 - feeList[]
2017-02-21 15:51:06 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:81 - Module: Fee
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:06 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:51:06 INFO  Loggers:81 - getting connections
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:51:06 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:51:06 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:51:06 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:51:07 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:07 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:51:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:51:07 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:51:07 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:51:07 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:07 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:51:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:07 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:51:07 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:51:07 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:51:07 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:51:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:51:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:51:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:51:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:51:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:51:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:51:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:51:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:51:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:51:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:51:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:51:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:51:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:51:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:51:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:52:16 INFO  Loggers:86 - com.gsmart.model.WeekDays@186f44
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:52:16 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:52:16 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:52:16 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:52:16 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:52:16 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:52:16 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:52:16 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:54:04 INFO  Loggers:84 - feeList[]
2017-02-21 15:54:04 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:54:04 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:81 - Module: Fee
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 15:54:04 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:54:04 INFO  Loggers:81 - getting connections
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:54:04 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:81 - Module: Fee
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:04 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:04 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 15:54:04 INFO  Loggers:84 - feeList[]
2017-02-21 15:54:04 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 15:54:04 INFO  Loggers:81 - getting connections
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 15:54:04 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 15:54:04 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 15:54:04 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:05 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:54:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:54:05 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:54:05 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:05 INFO  Loggers:81 - Module: ReportCard
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:05 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:05 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 15:54:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 15:54:05 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 15:54:05 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 15:54:05 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:54:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:54:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:54:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:54:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 15:54:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1d786b
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 15:54:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 15:54:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 15:54:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 15:54:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:54:07 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:07 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:07 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:07 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:07 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:54:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:54:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:07 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:54:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:54:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:81 - Module: Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 15:54:08 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 15:54:08 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 15:54:08 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 15:54:08 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:08 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 15:54:08 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 15:54:14 INFO  Loggers:86 - com.gsmart.model.WeekDays@1b86b78
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 15:54:14 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 15:54:14 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 15:54:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 15:54:14 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 15:54:14 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 15:54:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 15:54:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:02:02 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 15:50:43 IST 2017]; root of context hierarchy
2017-02-21 16:02:02 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 16:02:31 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 16:02:31 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:02:31 IST 2017]; root of context hierarchy
2017-02-21 16:02:31 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 16:02:32 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 16:02:32 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 16:02:33 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 16:02:33 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 16:02:33 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 16:02:33 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 16:02:34 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 16:02:34 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 16:02:35 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 16:02:35 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 16:02:35 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 16:02:35 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 16:02:35 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 16:02:35 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 16:02:35 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 16:02:36 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 16:02:36 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 16:02:36 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:02:36 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 16:02:36 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:02:37 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 16:02:37 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 16:02:37 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 16:02:37 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 16:02:37 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 16:02:37 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 16:02:37 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 16:02:37 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 16:02:37 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@16f0807
2017-02-21 16:02:37 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 16:02:37 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 16:02:37 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 16:02:38 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 6328 ms
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 16:02:44 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 16:02:44 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 16:02:44 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:02:44 INFO  Loggers:81 - User is already logged in
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 16:02:44 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 16:02:44 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 16:02:44 INFO  Loggers:66 - given modules size is : 10
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 16:02:44 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 16:02:44 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 16:02:44 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 16:02:44 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:02:44 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:02:44 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 16:02:44 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 16:02:44 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=463772170825574568249995107714}
2017-02-21 16:02:44 INFO  Loggers:81 - Token Number463772170825574568249995107714
2017-02-21 16:02:44 INFO  Loggers:81 - Session Attribute: 463772170825574568249995107714
2017-02-21 16:02:45 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:02:45 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:02:51 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@91fc82
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:51 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:51 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:51 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:02:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:02:51 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:02:51 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:02:51 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@91fc82
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:51 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:51 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:51 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:02:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:51 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:02:51 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:02:51 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:02:51 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:02:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:02:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:55 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:55 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:02:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:02:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:02:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:02:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:02:56 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:02:56 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:02:56 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:02:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:02:56 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:02:56 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:02:56 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:03:02 INFO  Loggers:86 - com.gsmart.model.WeekDays@110f6db
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:02 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:03:02 INFO  Loggers:86 - com.gsmart.model.WeekDays@110f6db
2017-02-21 16:03:02 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:03:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 16:03:02 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 16:03:02 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:03:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:03:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:03:05 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:03:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:05 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:03:06 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:03:06 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:03:06 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:03:06 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:03:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@91fc82
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:03:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:03:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:03:06 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@91fc82
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:06 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:06 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:03:06 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:03:06 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:03:06 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:03:08 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:03:08 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:03:08 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:03:08 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:03:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:03:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:03:09 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:03:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:03:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:03:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:03:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:03:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:04:10 INFO  Loggers:86 - com.gsmart.model.WeekDays@177dd7d
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:04:10 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:04:10 INFO  Loggers:86 - com.gsmart.model.WeekDays@177dd7d
2017-02-21 16:04:10 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:04:10 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 16:04:10 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 16:04:10 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:04:10 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:04:10 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:06:55 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 16:06:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:06:55 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 16:06:55 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 16:06:55 INFO  Loggers:81 - Start :: Object Received 463772170825574568249995107714
2017-02-21 16:06:55 INFO  Loggers:86 - 
Token [
	TokenNumber=463772170825574568249995107714
	SmartID=null
	Role=null ]
2017-02-21 16:06:59 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 16:07:16 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 16:07:16 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 16:07:16 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:07:16 INFO  Loggers:81 - Authenticationg the user
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 16:07:16 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 16:07:16 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:07:16 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 16:07:16 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 16:07:16 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 16:07:16 INFO  Loggers:66 - given modules size is : 10
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 16:07:16 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 16:07:16 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 16:07:16 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 16:07:16 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 16:07:16 INFO  Loggers:86 - 
Token [
	TokenNumber=335475303450139571427077341471
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:07:16 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 16:07:16 INFO  Loggers:81 - Token generated: 335475303450139571427077341471
2017-02-21 16:07:16 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 16:07:16 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 16:07:16 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=335475303450139571427077341471}
2017-02-21 16:07:16 INFO  Loggers:81 - Token Number335475303450139571427077341471
2017-02-21 16:07:16 INFO  Loggers:81 - Session Attribute: 335475303450139571427077341471
2017-02-21 16:07:16 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:07:17 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:08:28 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:02:31 IST 2017]; root of context hierarchy
2017-02-21 16:08:28 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 16:08:39 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 16:08:39 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:08:39 IST 2017]; root of context hierarchy
2017-02-21 16:08:39 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 16:08:40 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 16:08:41 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 16:08:41 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 16:08:41 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 16:08:41 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 16:08:41 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 16:08:42 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 16:08:42 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 16:08:43 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 16:08:43 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 16:08:43 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 16:08:43 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 16:08:44 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 16:08:44 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 16:08:44 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 16:08:44 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 16:08:44 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 16:08:44 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 16:08:44 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 16:08:45 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 16:08:45 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 16:08:45 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:08:45 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 16:08:45 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:45 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:08:46 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 16:08:46 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 16:08:46 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 16:08:46 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 16:08:46 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 16:08:46 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 16:08:46 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 16:08:46 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 16:08:46 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@118428a
2017-02-21 16:08:46 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 16:08:46 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 16:08:46 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 16:08:46 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 7295 ms
2017-02-21 16:09:06 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 16:09:06 INFO  Loggers:81 - Start :: Object Received 335475303450139571427077341471
2017-02-21 16:09:06 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 16:09:06 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 16:09:06 INFO  Loggers:81 - Start :: Object Received 335475303450139571427077341471
2017-02-21 16:09:06 INFO  Loggers:86 - 
Token [
	TokenNumber=335475303450139571427077341471
	SmartID=null
	Role=null ]
2017-02-21 16:09:06 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 16:09:24 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 16:09:24 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 16:09:24 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:09:24 INFO  Loggers:81 - Authenticationg the user
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 16:09:24 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 16:09:24 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:09:24 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 16:09:24 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 16:09:24 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 16:09:24 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 16:09:24 INFO  Loggers:66 - given modules size is : 10
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 16:09:24 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 16:09:24 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 16:09:24 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 16:09:25 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 16:09:25 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:25 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 16:09:25 INFO  Loggers:81 - Token generated: 472709519586387265347272979082
2017-02-21 16:09:25 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 16:09:25 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 16:09:25 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=472709519586387265347272979082}
2017-02-21 16:09:25 INFO  Loggers:81 - Token Number472709519586387265347272979082
2017-02-21 16:09:25 INFO  Loggers:81 - Session Attribute: 472709519586387265347272979082
2017-02-21 16:09:25 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:09:25 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:09:28 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@7e7fe
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:28 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:28 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:28 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:09:28 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:28 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:09:28 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:09:28 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:09:28 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@7e7fe
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:28 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:28 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:28 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:09:28 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:28 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:28 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:09:28 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:09:28 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:09:28 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:31 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:31 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:31 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:31 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:31 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:31 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:09:36 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:36 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:09:36 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:09:36 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:09:36 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 16:09:36 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 16:09:36 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:36 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:36 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:41 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:41 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:41 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:09:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:09:41 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:09:41 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:41 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:41 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:41 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:41 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:09:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:09:41 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:09:41 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:09:41 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:09:42 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@7e7fe
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:42 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:42 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:42 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:09:42 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:42 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:42 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:09:42 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:09:42 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:09:42 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@7e7fe
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:42 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:42 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:42 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:42 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:42 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:09:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:09:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:09:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:09:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:44 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:44 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:44 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:44 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:09:44 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:44 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:44 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:09:45 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:09:45 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:09:45 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:09:45 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:09:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:09:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:09:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:09:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:09:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:09:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:09:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:10:15 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:10:15 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:10:15 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:10:15 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:10:15 INFO  Loggers:105 - End :: WeekDaysDaoImpl.deleteweekdays() :: 132
2017-02-21 16:10:15 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 132
2017-02-21 16:10:15 INFO  Loggers:105 - End :: WeekDayController.deleteWeekDays() :: 126
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:10:15 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:10:15 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:15:17 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:08:39 IST 2017]; root of context hierarchy
2017-02-21 16:15:17 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 16:15:46 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 16:15:46 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:15:46 IST 2017]; root of context hierarchy
2017-02-21 16:15:47 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 16:15:49 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 16:15:49 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 16:15:50 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 16:15:50 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 16:15:50 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 16:15:50 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 16:15:51 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 16:15:52 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 16:15:52 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 16:15:52 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 16:15:52 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 16:15:52 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 16:15:54 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 16:15:54 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 16:15:54 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 16:15:54 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 16:15:54 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 16:15:54 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 16:15:54 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 16:15:55 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 16:15:55 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 16:15:55 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 16:15:55 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 16:15:55 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 16:15:55 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 16:15:55 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 16:15:55 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 16:15:55 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 16:15:55 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 16:15:55 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:15:55 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 16:15:55 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 16:15:55 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 16:15:55 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:15:55 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 16:15:55 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 16:15:55 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 16:15:55 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:15:55 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 16:15:55 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:56 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:15:57 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 16:15:57 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 16:15:57 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 16:15:57 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 16:15:57 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 16:15:57 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 16:15:57 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 16:15:57 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 16:15:57 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@a2db2b
2017-02-21 16:15:57 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 16:15:57 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 16:15:57 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 16:15:57 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 11048 ms
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 16:16:04 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 16:16:04 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 16:16:04 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:16:04 INFO  Loggers:81 - User is already logged in
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 16:16:04 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 16:16:04 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 16:16:04 INFO  Loggers:66 - given modules size is : 10
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 16:16:04 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 16:16:04 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 16:16:04 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 16:16:04 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:16:04 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:16:04 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 16:16:04 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 16:16:04 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome back, token=472709519586387265347272979082}
2017-02-21 16:16:04 INFO  Loggers:81 - Token Number472709519586387265347272979082
2017-02-21 16:16:04 INFO  Loggers:81 - Session Attribute: 472709519586387265347272979082
2017-02-21 16:16:05 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:16:05 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:09 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:09 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:09 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:09 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:09 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:09 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:09 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:09 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:09 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:09 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:09 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:09 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:09 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:09 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:14 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:14 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:14 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:14 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:14 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:20 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:16:20 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:16:20 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:20 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:20 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:16:20 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:16:20 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:16:20 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 6) already exists.
2017-02-21 16:16:20 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:16:20 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:16:20 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 154
2017-02-21 16:16:20 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:16:20 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=6, isActive=Y]
2017-02-21 16:16:20 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:81 - Module: Fee
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:16:24 INFO  Loggers:84 - feeList[]
2017-02-21 16:16:24 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:16:24 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:16:24 INFO  Loggers:81 - getting connections
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:16:24 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:16:24 INFO  Loggers:84 - feeList[]
2017-02-21 16:16:24 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:16:24 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:81 - Module: Fee
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:24 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:24 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:24 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:16:24 INFO  Loggers:81 - getting connections
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:16:24 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:16:24 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:24 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:25 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:25 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:25 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:25 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:25 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:25 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:25 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:25 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:25 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:25 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:25 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:25 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:25 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:25 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:25 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:25 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:25 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:27 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:27 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:27 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:27 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:27 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:27 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:36 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:16:36 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=THURSDAY, isActive=null]
2017-02-21 16:16:36 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:16:36 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:16:36 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:16:36 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:16:43 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:16:43 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=SATURDAY, isActive=null]
2017-02-21 16:16:43 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:16:43 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:16:43 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:16:43 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:16:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:16:44 INFO  Loggers:84 - feeList[]
2017-02-21 16:16:44 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:16:44 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:81 - Module: Fee
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:16:44 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:44 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:44 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:16:44 INFO  Loggers:81 - getting connections
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:16:44 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:44 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:44 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:44 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:44 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:16:45 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:16:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:45 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:45 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:16:45 INFO  Loggers:84 - feeList[]
2017-02-21 16:16:45 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:45 INFO  Loggers:81 - Module: Fee
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:45 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:45 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:16:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:16:45 INFO  Loggers:81 - getting connections
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:16:45 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:16:45 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:16:45 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:46 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:46 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:16:46 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:46 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:46 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:46 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:16:46 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:46 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:46 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:46 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:16:46 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:16:46 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:16:46 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:16:47 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:47 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:47 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:47 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:16:48 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:16:48 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:16:48 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:16:48 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:16:48 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:48 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:16:48 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:16:54 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:16:54 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=SATURDAY, isActive=Y]
2017-02-21 16:16:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:16:54 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:16:54 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:16:54 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:16:55 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:16:55 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 7) already exists.
2017-02-21 16:16:55 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:16:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:16:55 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 154
2017-02-21 16:16:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:16:55 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=7, isActive=Y]
2017-02-21 16:16:55 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:17:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:17:02 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:17:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:17:02 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:17:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:17:02 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:02 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:17:02 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:17:59 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:17:59 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=THURSDAY, isActive=Y]
2017-02-21 16:17:59 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:17:59 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:17:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:17:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:17:59 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:17:59 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 5) already exists.
2017-02-21 16:17:59 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:17:59 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:17:59 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 154
2017-02-21 16:17:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:17:59 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=5, isActive=Y]
2017-02-21 16:17:59 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:18:02 INFO  Loggers:84 - feeList[]
2017-02-21 16:18:02 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:18:02 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:81 - Module: Fee
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:18:02 INFO  Loggers:81 - getting connections
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:18:02 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:18:02 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:81 - Module: Fee
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:02 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:02 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:02 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:18:02 INFO  Loggers:81 - getting connections
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:18:02 INFO  Loggers:84 - feeList[]
2017-02-21 16:18:02 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:18:02 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:18:02 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:18:02 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:18:04 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:04 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:04 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:04 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:18:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:18:04 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:18:04 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:18:04 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:04 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:04 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:04 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:18:04 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:04 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:04 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:04 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:18:04 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:18:04 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:18:04 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:05 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:18:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:18:06 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:18:06 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:18:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:18:06 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:18:06 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:18:06 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:42 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:19:42 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=WEDNESDAY, isActive=null]
2017-02-21 16:19:42 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:19:42 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:19:42 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:19:42 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:19:42 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:19:42 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 4) already exists.
2017-02-21 16:19:42 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:19:42 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:19:42 INFO  Loggers:105 - End :: WeekDaysServiceImpl.addWeekDaysList() :: 104
2017-02-21 16:19:42 INFO  Loggers:105 - End :: WeekDayController.addWeekDays() :: 89
2017-02-21 16:19:45 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:19:45 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=FRIDAY, isActive=null]
2017-02-21 16:19:45 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:19:45 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:19:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:19:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:19:45 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:19:45 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 6) already exists.
2017-02-21 16:19:45 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:19:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:19:45 INFO  Loggers:105 - End :: WeekDaysServiceImpl.addWeekDaysList() :: 104
2017-02-21 16:19:45 INFO  Loggers:105 - End :: WeekDayController.addWeekDays() :: 89
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:19:54 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:54 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:54 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:54 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:19:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:19:54 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:19:54 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:19:54 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:54 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:54 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:54 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:19:54 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:54 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:54 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:54 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:19:54 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:19:54 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:19:54 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:19:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:19:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:19:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:19:55 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:19:55 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:19:55 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:19:55 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:19:55 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:19:55 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:19:55 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:20:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:03 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:03 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:20:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:20:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:20:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:20:03 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:03 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:03 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:03 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:20:03 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:03 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:03 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:20:03 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:20:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:20:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:05 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:05 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:05 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:05 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:05 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:05 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:05 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:05 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:05 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:16 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:20:16 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=TUESDAY, isActive=null]
2017-02-21 16:20:16 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:20:16 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:20:16 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:20:16 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:20:16 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:20:16 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 3) already exists.
2017-02-21 16:20:16 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:20:16 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:20:16 INFO  Loggers:105 - End :: WeekDaysServiceImpl.addWeekDaysList() :: 104
2017-02-21 16:20:16 INFO  Loggers:105 - End :: WeekDayController.addWeekDays() :: 89
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:20:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:20:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:20:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:20:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:20:21 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@3137f4
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:21 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:21 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:20:21 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:21 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:21 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:21 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:20:21 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:20:21 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:20:21 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:20:22 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:20:22 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:20:22 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:20:22 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:20:22 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:20:22 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:20:22 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:21:26 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 16:21:26 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:21:26 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 16:21:26 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 78
2017-02-21 16:21:26 INFO  Loggers:81 - Start :: Object Received 472709519586387265347272979082
2017-02-21 16:21:26 INFO  Loggers:86 - 
Token [
	TokenNumber=472709519586387265347272979082
	SmartID=null
	Role=null ]
2017-02-21 16:21:26 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 16:22:58 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:15:46 IST 2017]; root of context hierarchy
2017-02-21 16:22:58 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 16:23:20 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 16:23:20 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:23:20 IST 2017]; root of context hierarchy
2017-02-21 16:23:20 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 16:23:21 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 16:23:21 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 16:23:21 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 16:23:21 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 16:23:21 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 16:23:21 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 16:23:22 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 16:23:22 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 16:23:22 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 16:23:22 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 16:23:22 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 16:23:22 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 16:23:23 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 16:23:23 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 16:23:23 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 16:23:23 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 16:23:23 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 16:23:23 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 16:23:23 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 16:23:24 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 16:23:24 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 16:23:24 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 16:23:24 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 16:23:24 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:24 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 16:23:25 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 16:23:25 INFO  StdSchedulerFactory:1184 - Using default implementation for ThreadExecutor
2017-02-21 16:23:25 INFO  SchedulerSignalerImpl:61 - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2017-02-21 16:23:25 INFO  QuartzScheduler:240 - Quartz Scheduler v.2.2.1 created.
2017-02-21 16:23:25 INFO  RAMJobStore:155 - RAMJobStore initialized.
2017-02-21 16:23:25 INFO  QuartzScheduler:305 - Scheduler meta-data: Quartz Scheduler (v2.2.1) 'scheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2017-02-21 16:23:25 INFO  StdSchedulerFactory:1339 - Quartz scheduler 'scheduler' initialized from an externally provided properties instance.
2017-02-21 16:23:25 INFO  StdSchedulerFactory:1343 - Quartz scheduler version: 2.2.1
2017-02-21 16:23:25 INFO  QuartzScheduler:2311 - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1cd50d9
2017-02-21 16:23:25 INFO  DefaultLifecycleProcessor:341 - Starting beans in phase 2147483647
2017-02-21 16:23:25 INFO  SchedulerFactoryBean:653 - Starting Quartz Scheduler now
2017-02-21 16:23:25 INFO  QuartzScheduler:575 - Scheduler scheduler_$_NON_CLUSTERED started.
2017-02-21 16:23:25 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 5044 ms
2017-02-21 16:23:39 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 16:23:39 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:23:39 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 16:23:39 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 16:23:39 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 44
2017-02-21 16:23:39 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 16:23:39 INFO  Loggers:81 - Authenticationg the user
2017-02-21 16:23:39 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 16:23:40 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 16:23:40 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 16:23:40 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:23:40 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:23:40 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 113
2017-02-21 16:23:40 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 16:23:40 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 197
2017-02-21 16:23:40 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 16:23:40 INFO  Loggers:66 - given modules size is : 10
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 16:23:40 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 16:23:40 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 223
2017-02-21 16:23:40 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 16:23:40 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 16:23:40 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:40 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 47
2017-02-21 16:23:40 INFO  Loggers:81 - Token generated: 1097172444283317669268170330274
2017-02-21 16:23:40 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 100
2017-02-21 16:23:40 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 16:23:40 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1097172444283317669268170330274}
2017-02-21 16:23:40 INFO  Loggers:81 - Token Number1097172444283317669268170330274
2017-02-21 16:23:40 INFO  Loggers:81 - Session Attribute: 1097172444283317669268170330274
2017-02-21 16:23:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:23:41 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:23:47 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:47 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:23:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:23:47 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:23:47 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:23:47 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:47 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:47 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:23:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:47 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:23:47 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:23:47 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:23:47 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:23:51 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:23:51 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:23:51 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:23:51 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:23:51 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:23:51 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:51 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:23:51 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:23:59 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:23:59 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=SATURDAY, isActive=null]
2017-02-21 16:23:59 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:23:59 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:23:59 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:23:59 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:06 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:24:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:24:06 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:24:06 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:06 INFO  Loggers:81 - Module: ReportCard
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:06 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-21 16:24:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-21 16:24:06 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-21 16:24:06 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-21 16:24:06 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:07 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:07 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:07 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:07 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:07 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:07 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:07 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:07 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:07 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:07 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:07 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:07 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:08 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:08 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:19 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:24:19 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=THURSDAY, isActive=null]
2017-02-21 16:24:19 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:24:19 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:24:19 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:24:19 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:24:24 INFO  Loggers:105 - Start :: WeekDayController.addWeekDays() :: 71
2017-02-21 16:24:24 INFO  Loggers:86 - WeekDays [school=null, institution=null, weekDay=FRIDAY, isActive=null]
2017-02-21 16:24:24 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 257
2017-02-21 16:24:24 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 272
2017-02-21 16:24:24 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.addWeekDaysList() :: 74
2017-02-21 16:24:24 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:26 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:26 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:24:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:24:26 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:24:26 INFO  Loggers:84 - feeList[]
2017-02-21 16:24:26 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:26 INFO  Loggers:81 - Module: Fee
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:26 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:24:26 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:24:26 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:24:26 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:26 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:24:26 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:24:26 INFO  Loggers:81 - getting connections
2017-02-21 16:24:26 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:24:27 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:24:27 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:24:27 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:27 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:24:27 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:27 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:24:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:24:27 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:27 INFO  Loggers:81 - Module: Fee
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:27 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:27 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:24:27 INFO  Loggers:84 - feeList[]
2017-02-21 16:24:27 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:24:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:24:27 INFO  Loggers:81 - getting connections
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:24:27 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:24:27 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:27 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:28 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:28 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:28 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:28 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:28 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:28 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:28 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:28 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:28 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:28 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:28 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:28 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:28 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:28 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:28 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:28 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:28 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:28 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:28 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:30 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:30 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:30 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:30 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:30 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:30 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:30 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:39 INFO  Loggers:105 - Start :: WeekDayController.deleteWeekDays() :: 112
2017-02-21 16:24:39 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=FRIDAY, isActive=Y]
2017-02-21 16:24:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:39 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:39 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.deleteWeekdaysList() :: 124
2017-02-21 16:24:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.addWeekDays() :: 54
2017-02-21 16:24:39 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 23505
2017-02-21 16:24:39 ERROR SqlExceptionHelper:146 - ERROR: duplicate key value violates unique constraint "weekdays_pkey"
  Detail: Key (institution, school, weekday)=(DPS, DPS, 6) already exists.
2017-02-21 16:24:39 INFO  AbstractBatchImpl:208 - HHH000010: On release of batch it still contained JDBC statements
2017-02-21 16:24:39 INFO  Loggers:105 - End :: WeekDaysDaoImpl.addWeekDays() :: 68
2017-02-21 16:24:39 INFO  Loggers:105 - End :: WeekDaysServiceImpl.deleteWeekdaysList() :: 154
2017-02-21 16:24:39 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.deleteweekdays() :: 118
2017-02-21 16:24:39 INFO  Loggers:86 - WeekDays [school=DPS, institution=DPS, weekDay=6, isActive=Y]
2017-02-21 16:24:39 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/weekdays/delete/
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:24:41 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:24:41 INFO  Loggers:84 - feeList[]
2017-02-21 16:24:41 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterController.getFee() :: 66
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:81 - Module: Fee
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:81 - Module: FeeMaster
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received FeeMaster
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:24:41 INFO  Loggers:81 - getting connections
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeController.getFeeList() :: 63
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 26
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterServicesImpl.getFeeList() :: 38
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:24:41 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeDaoImpl.getFeeList() :: 39
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeMasterDaoImpl.getFeeList() :: 48
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeDaoImpl.getFeeList() :: 60
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getFeeList() :: 30
2017-02-21 16:24:41 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeServicesImpl.getFeeList() :: 36
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeController.getFeeList() :: 90
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeMasterDaoImpl.getFeeList() :: 68
2017-02-21 16:24:41 INFO  Loggers:84 - feeList[]
2017-02-21 16:24:41 INFO  Loggers:86 - {modulePermission=
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], feeList=[]}
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeController.getPaidStudentsList() :: 289
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:81 - Module: Fee
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:41 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:41 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:41 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 61
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeDaoImpl.getPaidStudentsList() :: 174
2017-02-21 16:24:41 INFO  Loggers:81 - getting connections
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeDaoImpl.getPaidStudentsList() :: 190
2017-02-21 16:24:41 INFO  Loggers:105 - Start :: FeeServicesImpl.getPaidStudentsList() :: 65
2017-02-21 16:24:41 INFO  Loggers:84 - Start :: Object Received []
2017-02-21 16:24:41 INFO  Loggers:105 - End :: FeeServicesImpl.getPaidStudentsList() :: 71
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:43 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:43 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 16:24:43 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@fc4617
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:43 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:43 INFO  Loggers:81 - Module: RolePermission
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:43 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 16:24:43 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:43 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:43 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:43 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 230
2017-02-21 16:24:43 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 16:24:43 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 246
2017-02-21 16:24:43 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 16:24:45 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received 1097172444283317669268170330274
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:81 - Module: Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 16:24:45 INFO  Loggers:86 - 
Token [
	TokenNumber=1097172444283317669268170330274
	SmartID=100001
	Role=ADMIN ]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 16:24:45 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 16:24:45 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 16:24:45 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:24:45 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 16:24:45 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 16:30:50 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 16:23:20 IST 2017]; root of context hierarchy
2017-02-21 16:30:50 INFO  DefaultLifecycleProcessor:356 - Stopping beans in phase 2147483647
2017-02-21 16:30:50 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 16:30:50 INFO  SchedulerFactoryBean:771 - Shutting down Quartz Scheduler
2017-02-21 16:30:50 INFO  QuartzScheduler:694 - Scheduler scheduler_$_NON_CLUSTERED shutting down.
2017-02-21 16:30:50 INFO  QuartzScheduler:613 - Scheduler scheduler_$_NON_CLUSTERED paused.
2017-02-21 16:30:50 INFO  QuartzScheduler:771 - Scheduler scheduler_$_NON_CLUSTERED shutdown complete.
2017-02-21 17:01:14 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:01:14 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:01:14 IST 2017]; root of context hierarchy
2017-02-21 17:01:14 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:01:15 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:01:15 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:02:12 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:02:12 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:02:12 IST 2017]; root of context hierarchy
2017-02-21 17:02:12 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:02:12 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:02:12 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:04:38 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:04:38 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:04:38 IST 2017]; root of context hierarchy
2017-02-21 17:04:38 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:04:39 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:04:39 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:27:13 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:27:13 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:27:13 IST 2017]; root of context hierarchy
2017-02-21 17:27:13 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:27:13 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:27:13 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:27:13 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:27:13 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:27:13 IST 2017]; root of context hierarchy
2017-02-21 17:27:13 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:27:13 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:27:13 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:27:22 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:27:22 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:27:22 IST 2017]; root of context hierarchy
2017-02-21 17:27:22 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:27:22 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:27:22 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:27:29 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:27:29 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:27:29 IST 2017]; root of context hierarchy
2017-02-21 17:27:29 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:27:29 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:27:29 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:27:51 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:27:51 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:27:51 IST 2017]; root of context hierarchy
2017-02-21 17:27:51 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:27:52 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:27:52 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:28:36 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:28:36 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:28:36 IST 2017]; root of context hierarchy
2017-02-21 17:28:36 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:28:37 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:28:37 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:29:38 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:29:38 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:29:38 IST 2017]; root of context hierarchy
2017-02-21 17:29:38 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:29:38 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:29:38 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:33:20 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:33:20 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:33:20 IST 2017]; root of context hierarchy
2017-02-21 17:33:20 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:33:21 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:33:21 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:33:33 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:33:33 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:33:33 IST 2017]; root of context hierarchy
2017-02-21 17:33:33 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:33:34 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:33:34 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:33:57 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:33:57 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:33:57 IST 2017]; root of context hierarchy
2017-02-21 17:33:57 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:33:58 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:33:58 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:34:29 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:34:29 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:34:29 IST 2017]; root of context hierarchy
2017-02-21 17:34:29 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:34:31 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:34:31 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:34:35 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:34:35 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:34:35 IST 2017]; root of context hierarchy
2017-02-21 17:34:35 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:34:36 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:34:36 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:35:15 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:35:15 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:35:15 IST 2017]; root of context hierarchy
2017-02-21 17:35:15 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:35:16 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:35:16 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:35:18 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:35:18 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:35:18 IST 2017]; root of context hierarchy
2017-02-21 17:35:18 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:35:18 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:35:18 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:38:46 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:38:46 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:38:46 IST 2017]; root of context hierarchy
2017-02-21 17:38:46 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:38:47 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:38:47 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1038)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4996)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 33 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 44 more
2017-02-21 17:38:58 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:38:58 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:38:58 IST 2017]; root of context hierarchy
2017-02-21 17:38:58 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:38:58 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:38:58 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:39:02 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:39:02 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:39:02 IST 2017]; root of context hierarchy
2017-02-21 17:39:02 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:39:02 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:39:02 ERROR DispatcherServlet:492 - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayServicesImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)
	at javax.servlet.GenericServlet.init(GenericServlet.java:158)
	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1238)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1151)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:828)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:135)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.gsmart.dao.HolidayDao com.gsmart.services.HolidayServicesImpl.holidayDao; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)
	... 36 more
Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.scheduling.quartz.SchedulerFactoryBean] for bean with name 'scheduler' defined in ServletContext resource [/WEB-INF/spring-config.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1327)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1396)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:385)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1002)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)
	... 38 more
Caused by: java.lang.ClassNotFoundException: org.springframework.scheduling.quartz.SchedulerFactoryBean
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1305)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1139)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247)
	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319)
	... 47 more
2017-02-21 17:43:43 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-21 17:43:43 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:43:43 IST 2017]; root of context hierarchy
2017-02-21 17:43:43 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-21 17:43:44 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-21 17:43:44 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-21 17:43:44 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-21 17:43:45 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-21 17:43:45 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-21 17:43:45 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-21 17:43:46 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-21 17:43:46 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-21 17:43:46 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-21 17:43:46 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-21 17:43:46 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-21 17:43:46 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-21 17:43:48 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-21 17:43:48 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-21 17:43:48 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-21 17:43:48 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-21 17:43:48 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-21 17:43:48 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-21 17:43:48 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, hod_smart_id, principal_smart_id, section]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, item_type, isactive, category]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-21 17:43:49 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-21 17:43:49 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-21 17:43:49 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-21 17:43:49 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-21 17:43:50 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/delete/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.deleteProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/getInventoryList],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.DashboardController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:51 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-21 17:43:52 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-21 17:43:52 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 9082 ms
2017-02-21 17:44:02 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 17:44:02 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 17:44:02 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 17:44:02 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 17:44:02 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-21 17:44:02 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 17:44:02 INFO  Loggers:81 - Authenticationg the user
2017-02-21 17:44:02 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 17:44:03 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 17:44:03 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 17:44:03 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-21 17:44:03 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-21 17:44:03 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 17:44:03 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-21 17:44:03 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-21 17:44:03 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 17:44:03 INFO  Loggers:66 - given modules size is : 10
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 17:44:03 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 17:44:03 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-21 17:44:03 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 17:44:03 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 17:44:03 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 17:44:03 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-21 17:44:03 INFO  Loggers:81 - Token generated: 540196387461247079995267893606
2017-02-21 17:44:03 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-21 17:44:03 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 17:44:03 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=540196387461247079995267893606}
2017-02-21 17:44:03 INFO  Loggers:81 - Token Number540196387461247079995267893606
2017-02-21 17:44:03 INFO  Loggers:81 - Session Attribute: 540196387461247079995267893606
2017-02-21 17:44:04 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 17:44:04 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 17:44:09 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@d79e60
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 17:44:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 17:44:09 INFO  Loggers:81 - Module: RolePermission
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 17:44:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 17:44:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 17:44:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 17:44:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 17:44:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 17:44:09 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-21 17:44:09 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-21 17:44:09 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@d79e60
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 17:44:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 17:44:09 INFO  Loggers:81 - Module: RolePermission
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 17:44:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-21 17:44:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 17:44:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 17:44:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 17:44:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 17:44:09 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-21 17:44:09 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-21 17:44:09 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-21 17:44:09 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 18:31:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 18:31:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 18:31:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDayController.getWeekDaysList() :: 53
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysServiceImpl.getWeekDaysList() :: 22
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: WeekDaysDaoImpl.getWeekList() :: 32
2017-02-21 18:31:09 INFO  Loggers:105 - End :: WeekDaysDaoImpl.getWeekList() :: 45
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayController.getHoliday() :: 68
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:81 - Module: Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-21 18:31:09 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-21 18:31:09 INFO  Loggers:81 - Start :: Object Received Holiday
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-21 18:31:09 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayServicesImpl.getHolidayList() :: 39
2017-02-21 18:31:09 INFO  Loggers:105 - Start :: HolidayDaoImpl.getHolidayList() :: 58
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayDaoImpl.getHolidayList() :: 78
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 86
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:31:09 INFO  Loggers:105 - End :: HolidayController.getHoliday() :: 88
2017-02-21 18:31:09 INFO  Loggers:84 - End :: Object Received [Holiday [holidayDate=2017-02-21 00:00:00.0, description=holi, entryTime=2017-02-21-11.21.19.633, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-03-02 00:00:00.0, description=diwali, entryTime=2017-02-21-11.21.31.362, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-17 00:00:00.0, description=gh, entryTime=2017-02-21-13.09.02.199, exitTime=null, updatedTime=null, isActive=Y], Holiday [holidayDate=2017-02-07 00:00:00.0, description=ppp, entryTime=2017-02-21-15.42.42.126, exitTime=null, updatedTime=null, isActive=Y]]
2017-02-21 18:53:14 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 18:53:14 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:53:14 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 18:53:14 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 76
2017-02-21 18:53:14 INFO  Loggers:81 - Start :: Object Received 540196387461247079995267893606
2017-02-21 18:53:14 INFO  Loggers:86 - 
Token [
	TokenNumber=540196387461247079995267893606
	SmartID=null
	Role=null ]
2017-02-21 18:53:14 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-21 18:53:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-21 18:53:40 INFO  Loggers:60 - Start :: Object Received null
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-21 18:53:40 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-21 18:53:40 INFO  Loggers:81 - Authenticationg the user
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-21 18:53:40 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-21 18:53:40 INFO  Loggers:66 - End :: Object Received 0
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-21 18:53:40 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-21 18:53:40 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-21 18:53:40 INFO  Loggers:81 - given role is : ADMIN
2017-02-21 18:53:40 INFO  Loggers:66 - given modules size is : 10
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Fee
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Registration
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Notice
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Leave
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-21 18:53:40 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-21 18:53:40 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-21 18:53:40 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-21 18:53:40 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-21 18:53:40 INFO  Loggers:86 - 
Token [
	TokenNumber=631060464294350391969520064003
	SmartID=100001
	Role=ADMIN ]
2017-02-21 18:53:40 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-21 18:53:40 INFO  Loggers:81 - Token generated: 631060464294350391969520064003
2017-02-21 18:53:40 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-21 18:53:40 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-21 18:53:40 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=631060464294350391969520064003}
2017-02-21 18:53:40 INFO  Loggers:81 - Token Number631060464294350391969520064003
2017-02-21 18:53:40 INFO  Loggers:81 - Session Attribute: 631060464294350391969520064003
2017-02-21 18:53:40 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 18:53:40 WARN  PageNotFound:1114 - No mapping found for HTTP request with URI [/gsmart/profile/profileCount] in DispatcherServlet with name 'mvc-dispatcher'
2017-02-21 18:53:43 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-21 18:53:43 INFO  Loggers:81 - Start :: Object Received 631060464294350391969520064003
2017-02-21 18:53:43 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-21 18:53:43 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 76
2017-02-21 18:53:43 INFO  Loggers:81 - Start :: Object Received 631060464294350391969520064003
2017-02-21 18:53:43 INFO  Loggers:86 - 
Token [
	TokenNumber=631060464294350391969520064003
	SmartID=null
	Role=null ]
2017-02-21 18:53:43 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-21 18:54:26 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Tue Feb 21 17:43:43 IST 2017]; root of context hierarchy
2017-02-22 09:46:36 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-22 09:46:36 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Wed Feb 22 09:46:36 IST 2017]; root of context hierarchy
2017-02-22 09:46:36 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-22 09:46:38 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-22 09:46:38 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-22 09:46:42 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-22 09:46:43 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-22 09:46:43 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-22 09:46:43 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-22 09:46:47 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-22 09:46:47 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-22 09:46:48 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-22 09:46:48 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-22 09:46:48 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-22 09:46:48 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-22 09:46:50 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-22 09:46:50 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-22 09:46:50 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, teachername, hod_smart_id, principal_smart_id, section]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, left_quantity, quantity, item_type, isactive, category]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-22 09:46:52 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-22 09:46:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-22 09:46:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 09:46:52 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-22 09:46:53 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-22 09:46:53 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-22 09:46:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 09:46:53 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-22 09:46:53 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/delete/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.deleteProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/getInventoryList],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.DashboardController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:53 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 09:46:54 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-22 09:46:54 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 17828 ms
2017-02-22 09:48:05 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-22 09:48:05 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-22 09:48:05 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 563
2017-02-22 09:48:05 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-22 09:48:06 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-22 09:48:07 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-22 09:48:07 INFO  Loggers:84 - End :: Object Received []
2017-02-22 09:48:07 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-22 09:48:07 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 575
2017-02-22 09:48:07 INFO  Loggers:84 - End :: Object Received []
2017-02-22 09:49:24 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-22 09:49:24 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-22 09:49:24 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-22 09:49:24 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-22 09:49:24 INFO  Loggers:84 - End :: Object Received []
2017-02-22 09:49:24 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-22 09:49:24 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-22 09:49:24 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 563
2017-02-22 09:49:24 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 575
2017-02-22 09:49:24 INFO  Loggers:84 - End :: Object Received []
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-22 09:49:52 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-22 09:49:52 INFO  Loggers:60 - Start :: Object Received null
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-22 09:49:52 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 09:49:52 INFO  Loggers:81 - Authenticationg the user
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-22 09:49:52 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-22 09:49:52 INFO  Loggers:66 - End :: Object Received 0
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 09:49:52 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-22 09:49:52 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-22 09:49:52 INFO  Loggers:81 - given role is : ADMIN
2017-02-22 09:49:52 INFO  Loggers:66 - given modules size is : 10
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Fee
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Registration
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Notice
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Leave
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-22 09:49:52 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-22 09:49:52 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-22 09:49:52 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-22 09:49:52 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-22 09:49:52 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-22 09:49:53 INFO  Loggers:81 - Token generated: 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-22 09:49:53 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-22 09:49:53 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=164309707423971871076741403308}
2017-02-22 09:49:53 INFO  Loggers:81 - Token Number164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:81 - Session Attribute: 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:81 - Module: Fee
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:81 - Module: Dashboard
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:53 INFO  Loggers:60 - End :: Object Received null
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:53 INFO  Loggers:60 - End :: Object Received null
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 09:49:53 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:81 - Module: Fee
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:53 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 09:49:53 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 09:49:53 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 09:49:53 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 09:49:53 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:81 - Module: Dashboard
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:53 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:53 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:53 INFO  Loggers:60 - End :: Object Received null
2017-02-22 09:49:53 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:53 INFO  Loggers:60 - End :: Object Received null
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 09:49:53 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 09:49:53 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 09:49:53 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 09:49:53 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 09:49:53 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 09:49:56 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@136a78
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:56 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:56 INFO  Loggers:81 - Module: RolePermission
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:56 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 09:49:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 09:49:56 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 09:49:56 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 09:49:56 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@136a78
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:49:56 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:56 INFO  Loggers:81 - Module: RolePermission
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:49:56 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 09:49:56 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:49:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:56 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:49:56 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:49:56 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 09:49:56 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 09:49:56 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 09:49:56 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:50:00 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:50:00 INFO  Loggers:81 - Module: ReportCard
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:50:00 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 09:50:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:50:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:50:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:50:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 09:50:00 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 09:50:00 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received 164309707423971871076741403308
2017-02-22 09:50:00 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:50:00 INFO  Loggers:81 - Module: ReportCard
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 09:50:00 INFO  Loggers:86 - 
Token [
	TokenNumber=164309707423971871076741403308
	SmartID=100001
	Role=ADMIN ]
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 09:50:00 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 09:50:00 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 09:50:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:50:00 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 09:50:00 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 09:50:00 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 09:50:00 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 09:50:00 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 10:58:21 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-22 10:58:21 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-22 10:58:21 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-22 10:58:21 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 563
2017-02-22 10:58:22 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 575
2017-02-22 10:58:22 INFO  Loggers:84 - End :: Object Received []
2017-02-22 10:58:22 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-22 10:58:22 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-22 10:58:22 INFO  Loggers:84 - End :: Object Received []
2017-02-22 10:58:22 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-22 10:58:26 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-22 10:58:26 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 10:58:26 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-22 10:58:26 INFO  Loggers:60 - Start :: Object Received null
2017-02-22 10:58:26 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-22 10:58:26 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 10:58:26 INFO  Loggers:81 - Authenticationg the user
2017-02-22 10:58:26 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-22 10:58:26 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-22 10:58:26 INFO  Loggers:66 - End :: Object Received 0
2017-02-22 10:58:26 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 10:58:27 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-22 10:58:27 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-22 10:58:27 INFO  Loggers:81 - given role is : ADMIN
2017-02-22 10:58:27 INFO  Loggers:66 - given modules size is : 10
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Fee
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Registration
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Notice
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Leave
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-22 10:58:27 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-22 10:58:27 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-22 10:58:27 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-22 10:58:27 INFO  Loggers:81 - Token generated: 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-22 10:58:27 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-22 10:58:27 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=77663137765024709280654857285}
2017-02-22 10:58:27 INFO  Loggers:81 - Token Number77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:81 - Session Attribute: 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:81 - Module: Fee
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:81 - Module: Dashboard
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:27 INFO  Loggers:60 - End :: Object Received null
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:27 INFO  Loggers:60 - End :: Object Received null
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 10:58:27 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 10:58:27 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 10:58:27 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 10:58:27 INFO  Loggers:81 - Module: Fee
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:27 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:81 - Module: Dashboard
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:27 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:27 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:27 INFO  Loggers:60 - End :: Object Received null
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 10:58:27 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:27 INFO  Loggers:60 - End :: Object Received null
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 10:58:27 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 10:58:27 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 10:58:27 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 10:58:27 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 10:58:27 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 10:58:27 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:31 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:31 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:31 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:31 INFO  Loggers:81 - Module: OrgStructure
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:31 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:31 INFO  Loggers:81 - Start :: Object Received OrgStructure
2017-02-22 10:58:31 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:31 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:31 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 10:58:31 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:31 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:32 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:32 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:32 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:32 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:32 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:32 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:32 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:32 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:32 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:32 INFO  Loggers:81 - Module: OrgStructure
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:32 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:32 INFO  Loggers:81 - Start :: Object Received OrgStructure
2017-02-22 10:58:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 10:58:32 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:32 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:32 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:32 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:32 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:32 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:32 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:32 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:32 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:44 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:44 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:44 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:44 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:44 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 10:58:44 INFO  Loggers:81 - childList got from search Employee
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForPost() :: 57
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:44 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:44 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:44 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:44 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:44 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:44 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:44 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:44 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 10:58:44 INFO  Loggers:81 - childList got from search Employee
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:81 - Module: Leave
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:81 - Module: LeaveMaster
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-22 10:58:47 INFO  Loggers:84 - End :: Object Received []
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveController.getLeave() :: 53
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:81 - Module: Leave
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received Leave
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 12:02:00, 
	role=ADMIN, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveServicesImpl.getLeaveList() :: 51
2017-02-22 10:58:47 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveDaoImpl.getLeaveList() :: 35
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveMasterController.getleavemaster() :: 44
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveDaoImpl.getLeaveList() :: 57
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveController.getLeave() :: 75
2017-02-22 10:58:47 INFO  Loggers:84 - End :: Object Received []
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:81 - Module: LeaveMaster
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:47 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:47 INFO  Loggers:81 - Start :: Object Received LeaveMaster
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:47 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:47 INFO  Loggers:105 - Start :: LeaveMasterDaoImpl.getLeaveMasterList() :: 35
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveMasterDaoImpl.getLeaveMasterList() :: 54
2017-02-22 10:58:47 INFO  Loggers:105 - End :: LeaveMasterController.getleavemaster() :: 64
2017-02-22 10:58:47 INFO  Loggers:84 - End :: Object Received [
 LeaveMaster [
	 leaveType=sick leave, 
	daysAllow=1, 
	entryTime=2017-02-14-18.30.37.171, 
	updateTime=null, 
	exitTime=null, 
	isActive=Y]]
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:49 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:49 INFO  Loggers:81 - Module: OrgStructure
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:49 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received OrgStructure
2017-02-22 10:58:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 10:58:49 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:49 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:49 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:49 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:49 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:49 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received 77663137765024709280654857285
2017-02-22 10:58:49 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:49 INFO  Loggers:81 - Module: OrgStructure
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 10:58:49 INFO  Loggers:86 - 
Token [
	TokenNumber=77663137765024709280654857285
	SmartID=100001
	Role=ADMIN ]
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received OrgStructure
2017-02-22 10:58:49 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 10:58:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:49 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 10:58:49 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-05 10:00:00, 
	role=ADMIN, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 10:58:49 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: SearchServiceImp.getAllProfiles() :: 63
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: ProfileDaoImp.getAllRecord() :: 307
2017-02-22 10:58:49 INFO  Loggers:81 - returnd to getall Profiles in serviceImpl 
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100004
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100005
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100003
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100002
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100007
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100006
2017-02-22 10:58:49 INFO  Loggers:81 - smartIds :100001
2017-02-22 10:58:49 INFO  Loggers:105 - End :: SearchServiceImp.getAllProfiles() :: 72
2017-02-22 10:58:49 INFO  Loggers:81 - End :: Object Received for each loop is executed
2017-02-22 10:58:49 INFO  Loggers:105 - Start :: SearchServiceImp.searchEmployeeInfo() :: 99
2017-02-22 10:58:49 INFO  Loggers:81 - Start :: Object Received searchEmployeeInfo 
2017-02-22 10:58:49 INFO  Loggers:105 - End :: SearchServiceImp.searchEmployeeInfo() :: 119
2017-02-22 10:58:49 INFO  Loggers:81 - End :: Object Received searchEmployeeInfo ended
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-22 11:00:13 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-22 11:00:13 INFO  Loggers:60 - Start :: Object Received null
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-22 11:00:13 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 11:00:13 INFO  Loggers:81 - Authenticationg the user
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-22 11:00:13 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-22 11:00:13 INFO  Loggers:66 - End :: Object Received 0
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 11:00:13 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-22 11:00:13 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-22 11:00:13 INFO  Loggers:81 - given role is : ADMIN
2017-02-22 11:00:13 INFO  Loggers:66 - given modules size is : 10
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Fee
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Registration
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Notice
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Leave
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-22 11:00:13 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-22 11:00:13 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-22 11:00:13 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-22 11:00:13 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:13 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-22 11:00:13 INFO  Loggers:81 - Token generated: 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-22 11:00:13 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-22 11:00:13 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=970295434731931953238040588450}
2017-02-22 11:00:13 INFO  Loggers:81 - Token Number970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:81 - Session Attribute: 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:13 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:13 INFO  Loggers:81 - Module: Fee
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:00:13 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 11:00:13 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:13 INFO  Loggers:81 - Module: Dashboard
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:00:13 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:00:13 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 11:00:13 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:00:13 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:00:13 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:00:13 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 11:00:13 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 11:00:13 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:00:13 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:00:13 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:00:13 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 11:00:13 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 11:00:13 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 11:00:13 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:00:13 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:00:13 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 11:00:13 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:00:14 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:14 INFO  Loggers:81 - Module: Dashboard
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:00:14 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:00:14 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:14 INFO  Loggers:81 - Module: Fee
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:00:14 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 11:00:14 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 11:00:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:00:14 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:00:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:00:14 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 11:00:14 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 11:00:14 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:00:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:00:14 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:00:14 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:00:14 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 11:00:14 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 11:00:14 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 11:00:14 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 11:00:14 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:33 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:33 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:09:33 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:09:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:09:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:09:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:09:33 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:09:33 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:33 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:33 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:09:33 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:09:33 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:09:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:09:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:09:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:09:33 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:09:33 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:09:33 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:35 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:35 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:09:35 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:09:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:09:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:09:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:09:35 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:09:35 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:09:35 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:35 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:09:35 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:09:35 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:09:35 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:09:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:35 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:09:35 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:09:35 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:09:35 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:09:35 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:10:35 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-22 11:10:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:10:35 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-22 11:10:35 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 76
2017-02-22 11:10:35 INFO  Loggers:81 - Start :: Object Received 970295434731931953238040588450
2017-02-22 11:10:35 INFO  Loggers:86 - 
Token [
	TokenNumber=970295434731931953238040588450
	SmartID=null
	Role=null ]
2017-02-22 11:10:35 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-22 11:10:36 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-22 11:10:36 INFO  Loggers:60 - Start :: Object Received null
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-22 11:10:36 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-22 11:10:36 INFO  Loggers:81 - Authenticationg the user
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-22 11:10:36 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-22 11:10:36 INFO  Loggers:66 - End :: Object Received 0
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-22 11:10:36 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-22 11:10:36 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-22 11:10:36 INFO  Loggers:81 - given role is : ADMIN
2017-02-22 11:10:36 INFO  Loggers:66 - given modules size is : 10
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Fee
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Registration
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Notice
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Leave
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-22 11:10:36 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-22 11:10:36 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-22 11:10:36 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-22 11:10:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:36 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-22 11:10:36 INFO  Loggers:81 - Token generated: 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-22 11:10:36 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-22 11:10:36 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1255538336987879687047648676527}
2017-02-22 11:10:36 INFO  Loggers:81 - Token Number1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:81 - Session Attribute: 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=null
	Role=null ]
2017-02-22 11:10:36 INFO  Loggers:81 - Module: Dashboard
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:10:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 11:10:36 INFO  Loggers:81 - Module: Fee
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:10:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:10:36 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 11:10:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:10:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:10:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:10:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:10:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:10:36 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 11:10:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:10:36 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 11:10:36 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:10:36 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 11:10:36 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 11:10:37 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 11:10:37 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 11:10:37 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 11:10:37 INFO  Loggers:81 - Module: Dashboard
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:10:37 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:10:37 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:37 INFO  Loggers:81 - Module: Fee
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:10:37 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:10:37 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-22 11:10:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:10:37 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:10:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:10:37 INFO  Loggers:60 - End :: Object Received null
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-22 11:10:37 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-22 11:10:37 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:10:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-22 11:10:37 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:10:37 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:10:37 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-22 11:10:37 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-22 11:10:37 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-22 11:10:37 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-22 11:10:37 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:32 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:32 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:32 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:11:32 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:11:32 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:32 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:32 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:32 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:32 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:32 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:32 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:32 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:32 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:11:32 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:11:32 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 11:11:33 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1c47a34
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:33 INFO  Loggers:81 - Module: RolePermission
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 11:11:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 11:11:33 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 11:11:33 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 11:11:33 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1c47a34
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:33 INFO  Loggers:81 - Module: RolePermission
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:33 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 11:11:33 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:33 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:33 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:33 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 11:11:33 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 11:11:33 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 11:11:33 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:36 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:11:36 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:11:36 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:36 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:36 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:36 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:36 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:36 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:36 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:36 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:11:36 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:11:36 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 11:11:38 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1c47a34
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:38 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:38 INFO  Loggers:81 - Module: RolePermission
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:38 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 11:11:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 11:11:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 11:11:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: RolePermissionController.getSubModels() :: 101
2017-02-22 11:11:38 INFO  Loggers:86 - org.apache.catalina.session.StandardSessionFacade@1c47a34
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:38 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:38 INFO  Loggers:81 - Module: RolePermission
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:38 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received RolePermission
2017-02-22 11:11:38 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:38 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:38 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:38 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getSubModuleNames() :: 360
2017-02-22 11:11:38 INFO  Loggers:81 - Start :: Object Received ADMIN
2017-02-22 11:11:38 INFO  Loggers:105 - End :: RolePermissionDaoImp.getSubModuleNames() :: 376
2017-02-22 11:11:38 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=2016-02-01 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Band
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:05:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Holiday
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:00, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Hierarchy
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:01, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=LeaveMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:02, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=FeeMaster
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:03, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=RolePermission
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:04, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Assign
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:07, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Privilege
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y], 
 RolePermission [
{	 entryTime=2016-02-02 10:00:08, 
	role=ADMIN, 
	moduleName=Maintenance, 
	subModuleName=Inventory
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]]
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:39 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:39 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:39 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardDaoImpl.search() :: 212
2017-02-22 11:11:39 INFO  Loggers:105 - End :: ReportCardDaoImpl.search() :: 231
2017-02-22 11:11:39 INFO  Loggers:105 - End :: ReportCardServiceImpl.search() :: 111
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:11:39 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:39 INFO  Loggers:81 - Module: ReportCard
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-22 11:11:39 INFO  Loggers:86 - 
Token [
	TokenNumber=1255538336987879687047648676527
	SmartID=100001
	Role=ADMIN ]
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-22 11:11:39 INFO  Loggers:81 - Start :: Object Received ReportCard
2017-02-22 11:11:39 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-22 11:11:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:39 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-22 11:11:39 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-01-02 10:00:02, 
	role=ADMIN, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 82
2017-02-22 11:11:39 INFO  Loggers:105 - Start :: ReportCardServiceImpl.search() :: 107
2017-02-22 11:11:39 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-22 11:11:39 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:12:29 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:12:29 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:12:29 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-22 11:12:29 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-22 11:12:29 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/reportCard/
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: ReportCardController.getList() :: 70
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-22 11:12:29 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:12:29 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-22 11:12:29 INFO  Loggers:81 - Start :: Object Received 1255538336987879687047648676527
2017-02-22 11:12:29 WARN  SqlExceptionHelper:144 - SQL Error: 0, SQLState: 53300
2017-02-22 11:12:29 ERROR SqlExceptionHelper:146 - FATAL: sorry, too many clients already
2017-02-22 11:12:29 INFO  GSmartExceptionHandler:18 - GSmartServiceException Occured:: URL=http://localhost:8080/gsmart/reportCard/
2017-02-22 12:38:57 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Wed Feb 22 09:46:36 IST 2017]; root of context hierarchy
2017-02-22 12:39:49 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-22 12:39:49 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Wed Feb 22 12:39:49 IST 2017]; root of context hierarchy
2017-02-22 12:39:49 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-22 12:39:50 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-22 12:39:50 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-22 12:39:50 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-22 12:39:50 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-22 12:39:50 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-22 12:39:50 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-22 12:39:51 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-22 12:39:51 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundGrades
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundGrades
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-22 12:39:51 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-22 12:39:51 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-22 12:39:51 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-22 12:39:51 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-22 12:39:52 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-22 12:39:52 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-22 12:39:52 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, teachername, hod_smart_id, principal_smart_id, section]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-22 12:39:52 INFO  DatabaseMetaData:147 - HHH000262: Table not found: GRADES
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, left_quantity, quantity, item_type, isactive, category]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-22 12:39:52 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-22 12:39:52 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-22 12:39:52 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-22 12:39:52 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-22 12:39:53 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-22 12:39:53 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-22 12:39:53 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-22 12:39:53 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-22 12:39:53 INFO  DatabaseMetaData:147 - HHH000262: Table not found: GRADES
2017-02-22 12:39:53 INFO  DatabaseMetaData:147 - HHH000262: Table not found: GRADES
2017-02-22 12:39:53 ERROR SchemaUpdate:236 - HHH000388: Unsuccessful: create table GRADES (GRADE varchar(255) not null, INSTITUTION varchar(255) not null, SCHOOL varchar(255) not null, END-PERCENTAGE float8, START-PERCENTAGE float8, hid int8, primary key (GRADE, INSTITUTION, SCHOOL))
2017-02-22 12:39:53 ERROR SchemaUpdate:237 - ERROR: syntax error at or near "END"
  Position: 116
2017-02-22 12:39:53 ERROR SchemaUpdate:236 - HHH000388: Unsuccessful: alter table GRADES add constraint FK_du4rhb4ieqlkkdcuva19qpbgc foreign key (hid) references HIERARCHY_MASTER
2017-02-22 12:39:53 ERROR SchemaUpdate:237 - ERROR: relation "grades" does not exist
2017-02-22 12:39:53 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/delete/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.deleteProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/getInventoryList],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.DashboardController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-22 12:39:54 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-22 12:39:54 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 4852 ms
2017-02-22 12:53:44 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Wed Feb 22 12:39:49 IST 2017]; root of context hierarchy
2017-02-23 09:51:49 INFO  DispatcherServlet:479 - FrameworkServlet 'mvc-dispatcher': initialization started
2017-02-23 09:51:50 INFO  XmlWebApplicationContext:513 - Refreshing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Thu Feb 23 09:51:50 IST 2017]; root of context hierarchy
2017-02-23 09:51:50 INFO  XmlBeanDefinitionReader:316 - Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-config.xml]
2017-02-23 09:51:54 INFO  AutowiredAnnotationBeanPostProcessor:141 - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2017-02-23 09:51:55 INFO  DriverManagerDataSource:133 - Loaded JDBC driver: org.postgresql.Driver
2017-02-23 09:52:00 INFO  Version:66 - HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-02-23 09:52:00 INFO  Version:54 - HHH000412: Hibernate Core {4.3.5.Final}
2017-02-23 09:52:00 INFO  Environment:239 - HHH000206: hibernate.properties not found
2017-02-23 09:52:00 INFO  Environment:346 - HHH000021: Bytecode provider name : javassist
2017-02-23 09:52:09 INFO  Dialect:145 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
2017-02-23 09:52:09 INFO  LobCreatorBuilder:123 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveMaster
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveMaster
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundInventory
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundInventory
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundReportCard
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundReportCard
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundGrades
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundGrades
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundFeeMaster
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundFeeMaster
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundAssign
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundAssign
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.RolePermissionCompound
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.RolePermissionCompound
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeaveDetails
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeaveDetails
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBand
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBand
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundHoliday
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundHoliday
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundWeekDays
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundWeekDays
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundLeave
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundLeave
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundModules
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundModules
2017-02-23 09:52:10 WARN  RootClass:288 - HHH000038: Composite-id class does not override equals(): com.gsmart.model.CompoundBanner
2017-02-23 09:52:10 WARN  RootClass:289 - HHH000039: Composite-id class does not override hashCode(): com.gsmart.model.CompoundBanner
2017-02-23 09:52:10 INFO  TransactionFactoryInitiator:62 - HHH000399: Using default transaction strategy (direct JDBC transactions)
2017-02-23 09:52:10 INFO  ASTQueryTranslatorFactory:47 - HHH000397: Using ASTQueryTranslatorFactory
2017-02-23 09:52:13 INFO  SchemaUpdate:182 - HHH000228: Running hbm2ddl schema update
2017-02-23 09:52:13 INFO  SchemaUpdate:193 - HHH000102: Fetching database metadata
2017-02-23 09:52:14 INFO  SchemaUpdate:205 - HHH000396: Updating schema
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.apply_leave
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, end_date, entry_time, updated_time, hid, is_active, leave_status, number_of_days, description, exit_time, leave_type, name, reportingmanager_id, start_date]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_bohcr510qv87k6gworvwg3apu]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [apply_leave_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.assign
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [standard, exit_time, teacher_smart_id, entry_time, updated_time, hid, is_active, teachername, hod_smart_id, principal_smart_id, section]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_qjiuwoxa3djsjqca2fsfacvpt]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [assign_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.band_master
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [band_id, exit_time, entry_time, updated_time, role, is_active, designation]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [band_master_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.fee
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [date, parent_name, smart_id, standard, entry_time, hid, exittime, reporting_manager_id, isactive, balance_fee, paid_fee, sports_fee, updatedtime, id_card_fee, academic_year, toatl_fee, name, mode_of_payment, fee_status, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_4yocb6nme6khe0y549xjo7smq]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.fee_master
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [standard, entry_time, updated_time, hid, isactive, sports_fee, exit_time, institution, id_card_fee, school, total_fee, transportation_fee, tuition_fee, miscellaneous_fee]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_3jf3o52vi8v105x9nd9vsm66s]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [fee_master_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.grades
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [end_percentage, institution, hid, school, grade, start_percentage]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_du4rhb4ieqlkkdcuva19qpbgc]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [grades_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.hierarchy_master
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, institution, hid, update_time, is_active, school]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [hierarchy_master_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.holiday_master
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, updated_time, holiday_date, hid, is_active, description]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_19qi13sy81jxmnv8li5lxx050]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [holiday_master_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, left_quantity, quantity, item_type, isactive, category]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_69cwc2d9nxdo2fbdwajax7vgy]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.inventory_assignments
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, standard, entry_time, updated_time, teacher_name, upd_smart_id, hid, is_active, quantity, item_type, section, exit_time, category]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_jjbcqtrbnfrm24mt741phjkh0]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [inventory_assignments_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.leavemaster
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, update_time, hid, is_active, leave_type, days_allow]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_paqgfwulaw8juc6ucw2y7sx12]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [leavemaster_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.leave_details
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, applied_leaves, leave_type, left_leaves]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_2swgkcrky61an8mu66eveufgs]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [leave_details_pkey]
2017-02-23 09:52:18 INFO  TableMetadata:66 - HHH000261: Table found: public.login
2017-02-23 09:52:18 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, entry_time, updated_time, password, hid, referencesmartid, attempt]
2017-02-23 09:52:18 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_7tog7ev58dmyo6j9tdy1fpd8k]
2017-02-23 09:52:18 INFO  TableMetadata:70 - HHH000126: Indexes: [login_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.modules
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [entry_time, hid, module, sub_module]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_hwnnjhuj1ntori6k73o5ti026]
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [modules_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.permission_master
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, p_edit, updated_time, hid, role, is_active, p_add, p_view, sub_module_name, p_del, module_name]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_mxswyetvs6aojdo7jiav3ay52]
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [permission_master_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.profile_master
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [sub_dept_name, country, syllabus, updated_time, billing_details, hid, previous_school, mother_name, martial_status, experiance, section, add_line1, ten_percentage, exit_time, institution, ten_school_name, academic_year, school, passport_expiry_date, band, state, twelve_pass_year, certification_details, ug_percentage, entry_time, image, joining_date, pincode, relation_with_guardian, emergency_contact_person, previous_year, caste, passport_issue_date, functional_manager, language_known, qualification, add_line2, pan_number, add_line3, nationality, counter_signing_manager_name, father_name, dob, domain, blood_group, father_mob_number, designation, pg_pass_year, email_id, visa_details, guardian_name, mother_income, role, gender, city, teacher_id, counter_signing_manager_id, mother_occupation, twelve_percentage, ten_pass_year, mother_mob_number, pg_percentage, first_name, class, smart_id, emergency_contact_number, pg_school_name, ecnr_status, father_occupation, is_active, reporting_manager_id, upd_smartid, ug_school_name, dept_name, last_name, reporting_manager_name, school_name, student_id, ug_pass_year, middle_name, aadhar_number, religion, previous_class, father_income, twelve_school_name, passport_number, rfid, mobile_number]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_rewb2a2wftktpfk7w5dd22wai]
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [profile_master_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.report_card
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [max_marks, standard, subject_grade, teacher_name, hid, is_active, entrytime, reporting_manager_id, subject, section, min_marks, exit_time, result, student_name, update_time, academic_year, marks_obtained, total_grade, smartid]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_q8d6cy4bo5rxoik3mbcvanf2h]
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [report_card_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.token
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [smart_id, hid, role, token_number]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: [fk_5lrma49hhnceu7jc3bpb1xgqv]
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [token_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.weekdays
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [institution, school, isactive, weekday]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [weekdays_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.banners
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, entry_time, image, updated_time, is_active, title]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [banners_pkey]
2017-02-23 09:52:19 INFO  TableMetadata:66 - HHH000261: Table found: public.notice
2017-02-23 09:52:19 INFO  TableMetadata:67 - HHH000037: Columns: [exit_time, smart_id, entry_time, update_time, is_active, role, message, type, updated_id]
2017-02-23 09:52:19 INFO  TableMetadata:69 - HHH000108: Foreign keys: []
2017-02-23 09:52:19 INFO  TableMetadata:70 - HHH000126: Indexes: [notice_pkey]
2017-02-23 09:52:19 INFO  SchemaUpdate:242 - HHH000232: Schema update complete
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/paidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/totalpaidfees],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.gettotalpaidfee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.feeStructureController(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/unpaidfee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeController.getUnPaidStudentsList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/viewFee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Fee>>> com.gsmart.controller.FeeController.getFeeList(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.addFee(com.gsmart.model.Fee,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/fee/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeController.editFee(com.gsmart.model.Fee,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryAssignmentsController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.editdeleteInventory(com.gsmart.model.InventoryAssignments,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventoryassignment],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryAssignmentsController.addInventory(com.gsmart.model.InventoryAssignments,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BannerController.getBanner(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.addBannner(com.gsmart.model.Banners,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/banner/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BannerController.editDeleteBanner(com.gsmart.model.Banners,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HolidayController.getHoliday(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.deleteBand(com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.addHoliday(com.gsmart.model.Holiday,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/holiday/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HolidayController.editHoliday(com.gsmart.model.Holiday,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.addAssigningReportee(com.gsmart.model.Assign,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getAssigningReportee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AssignController.editDeleteBand(com.gsmart.model.Assign,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/assign/staff],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AssignController.getStaffs(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.addLeaveMaster(com.gsmart.model.LeaveMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveMasterController.editLeaveMaster(com.gsmart.model.LeaveMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leavemaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveMasterController.getleavemaster(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/updateProfile/{updEmpSmartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.updateProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/employee],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewEmployeeProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/student],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.viewStudentProfiles(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/addProfile],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.addUser(com.gsmart.model.Profile,com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/delete/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.deleteProfile(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/registration/searchRep],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RegistrationController.searchRep(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LoginController.authenticate(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/login],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.LoginController.logout(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.PrivilegeController.editPrivilege(com.gsmart.model.Profile,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/privilege],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PrivilegeController.search(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/calender/{month}/{year}/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.getAttendance(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.Integer,java.lang.Integer,java.lang.String,com.gsmart.model.Holiday) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.addAttendance(java.util.Map<java.lang.String, java.util.List<com.gsmart.model.Attendance>>,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.AttendanceController.editDeleteAttendance(com.gsmart.model.Attendance,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/attendance/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.AttendanceController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.editDeleteBand(com.gsmart.model.Band,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.BandController.getBand(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/band],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.BandController.addBand(com.gsmart.model.Band,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.FeeMasterController.getFee(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.addFee(com.gsmart.model.FeeMaster,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/feeMaster/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.FeeMasterController.editFee(com.gsmart.model.FeeMaster,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/{task}],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.editLeave(com.gsmart.model.Leave,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.LeaveController.addLeave(com.gsmart.model.Leave,java.lang.Integer,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave/leftleaves/{smartId}/{leaveType}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeftLeaves(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,java.lang.String,java.lang.String)
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/leave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.LeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password/email],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.emailLink(java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/password],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.PasswordController.setPassword(com.gsmart.model.Login,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException,java.security.NoSuchAlgorithmException,java.io.UnsupportedEncodingException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/generic/{type}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewGenericNotice(java.lang.String)
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewMyNotice/{smartId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewMyNotice(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/addNotice],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.addNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/viewNotice/{smartId}/{year}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.viewNotice(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/deleteNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.deleteNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/notice/editNotice],methods=[PUT],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.NoticeController.editNotice(com.gsmart.model.Notice,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RolePermissionController.getPermissionList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.editPermission(com.gsmart.model.RolePermission,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission/subModules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.List<com.gsmart.model.RolePermission>> com.gsmart.controller.RolePermissionController.getSubModels(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rolepermission],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RolePermissionController.addPermission(com.gsmart.model.RolePermission,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ModulesController.addModules(com.gsmart.model.Modules,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/modules],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ModulesController.getmodules(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.editInventory(com.gsmart.model.Inventory,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.InventoryController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/inventory],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.InventoryController.addInventory(com.gsmart.model.Inventory,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/getInventoryList],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.DashboardController.getInventory(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.addHierarchy(com.gsmart.model.Hierarchy,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.HierarchyController.editDeleteHierarchy(com.gsmart.model.Hierarchy,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/hierarchy],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.HierarchyController.getHierarchy(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/{smartId}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.OrgStructureController.orgStructureController(java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/searchname],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.Search(com.gsmart.model.Search,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/org/search/{smartId}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.util.ArrayList<com.gsmart.model.Profile>>> com.gsmart.controller.OrgStructureController.searchRep(com.gsmart.model.Search,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.addReportCard(com.gsmart.model.ReportCard,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/excelToDB/{smartId}],methods=[POST],params=[],headers=[],consumes=[multipart/form-data],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.String>> com.gsmart.controller.ReportCardController.excelToDB(java.lang.String,org.springframework.web.multipart.MultipartFile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession)
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getList(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.ReportCardController.editDeleteReportCard(com.gsmart.model.ReportCard,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/reportCard/getStructure/{smartId}/{academicYear}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.ReportCardController.getReportCardStructure(java.lang.String,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartServiceException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.WeekDayController.getWeekDaysList() throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[POST],params=[],headers=[],consumes=[application/json],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.addWeekDays(com.gsmart.model.WeekDays,org.springframework.http.HttpHeaders) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.deleteWeekDays(com.gsmart.model.WeekDays,java.lang.String,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/weekdays],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.WeekDayController.updateWeekDays(com.gsmart.model.WeekDays) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.MyTeamLeaveController.getLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/myteamleave/{task}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.MyTeamLeaveController.editDeleteMyTeamLeave(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession,com.gsmart.model.Leave,java.lang.String) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> com.gsmart.controller.RfidController.getProfilesWithoutRfid(org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:23 INFO  RequestMappingHandlerMapping:197 - Mapped "{[/rfid],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<com.gsmart.util.IAMResponse> com.gsmart.controller.RfidController.addRfid(com.gsmart.model.Profile,org.springframework.http.HttpHeaders,javax.servlet.http.HttpSession) throws com.gsmart.util.GSmartBaseException
2017-02-23 09:52:34 INFO  ExceptionHandlerExceptionResolver:313 - Detected @ExceptionHandler methods in GSmartExceptionHandler
2017-02-23 09:52:35 INFO  DispatcherServlet:498 - FrameworkServlet 'mvc-dispatcher': initialization completed in 45300 ms
2017-02-23 10:10:41 INFO  Loggers:105 - Start :: BannerController.getBanner() :: 61
2017-02-23 10:10:41 INFO  Loggers:105 - Start :: NoticeController.viewGenericNotice() :: 209
2017-02-23 10:10:41 INFO  Loggers:105 - Start :: ProfileDaoImp.getBannerList() :: 563
2017-02-23 10:10:41 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 190
2017-02-23 10:10:41 INFO  Loggers:105 - Start :: NoticeDaoImpl.viewGenericNotice() :: 192
2017-02-23 10:10:43 INFO  Loggers:105 - End :: ProfileDaoImp.getBannerList() :: 575
2017-02-23 10:10:43 INFO  Loggers:84 - End :: Object Received []
2017-02-23 10:10:44 INFO  Loggers:105 - End :: NoticeDaoImpl.viewGenericNotice() :: 202
2017-02-23 10:10:44 INFO  Loggers:84 - End :: Object Received []
2017-02-23 10:10:44 INFO  Loggers:105 - End :: NoticeController.viewGenericNotice() :: 229
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 46
2017-02-23 10:40:05 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: LoginController.authenticate() :: 47
2017-02-23 10:40:05 INFO  Loggers:60 - Start :: Object Received null
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: LoginServicesImpl.authenticate() :: 40
2017-02-23 10:40:05 INFO  Loggers:86 - Login [smartId=100001, password=1234, newPassword=null, confirmPassword=null, referenceSmartId=null, attempt=null, entryTime=null, updatedTime=null]
2017-02-23 10:40:05 INFO  Loggers:81 - Authenticationg the user
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: LoginDaoImpl.authenticate() :: 36
2017-02-23 10:40:05 INFO  Loggers:105 - End :: LoginDaoImpl.authenticate() :: 66
2017-02-23 10:40:05 INFO  Loggers:66 - End :: Object Received 0
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: ProfileDaoImp.getProfileDetails() :: 278
2017-02-23 10:40:05 INFO  Loggers:105 - End :: ProfileDaoImp.getProfileDetails() :: 293
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: RolePermissionServicesImp.getPermission() :: 115
2017-02-23 10:40:05 INFO  Loggers:105 - End :: RolePermissionServicesImp.getPermission() :: 117
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: RolePermissionDaoImp.getPermission() :: 325
2017-02-23 10:40:05 INFO  Loggers:81 - given role is : ADMIN
2017-02-23 10:40:05 INFO  Loggers:66 - given modules size is : 10
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : ReportCard
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Maintenance
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Fee
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Registration
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : InventoryAssignments
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Notice
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Leave
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : performance-appraisal
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : OrgStructure
2017-02-23 10:40:05 INFO  Loggers:81 - given moduleName is : Contact-Teacher
2017-02-23 10:40:05 INFO  Loggers:105 - End :: RolePermissionDaoImp.getPermission() :: 353
2017-02-23 10:40:05 INFO  Loggers:84 - End :: Object Received [
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]]
2017-02-23 10:40:05 INFO  Loggers:105 - Start :: TokenDaoImpl.saveToken() :: 29
2017-02-23 10:40:05 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: TokenDaoImpl.saveToken() :: 46
2017-02-23 10:40:06 INFO  Loggers:81 - Token generated: 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - End :: LoginServicesImpl.authenticate() :: 96
2017-02-23 10:40:06 INFO  Loggers:105 - End :: LoginController.authenticate() :: 49
2017-02-23 10:40:06 INFO  Loggers:86 - {result=0, permissions=[
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=ReportCard, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Maintenance, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Registration, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=InventoryAssignments, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Notice, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Leave, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=performance-appraisal, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=OrgStructure, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null], 
 RolePermission [
{	 entryTime=null, 
	role=null, 
	moduleName=Contact-Teacher, 
	subModuleName=null
}, 
add=false,
view=false,
edit=false,
del=false,
updatedTime=null,
exitTime=null,
isActive=null]], profile=Profile [smartId=100001, firstName=AMAR, role=ADMIN, reportingManagerName=null, reportingManagerId=null, totalAmount=0.0, paidAmount=0.0, balanceAmount=0.0], message=welcome, token=1118845535592417998935420223507}
2017-02-23 10:40:06 INFO  Loggers:81 - Token Number1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:81 - Session Attribute: 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:81 - Module: Fee
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:81 - Module: Dashboard
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-23 10:40:06 INFO  Loggers:60 - End :: Object Received null
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-23 10:40:06 INFO  Loggers:60 - End :: Object Received null
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-23 10:40:06 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-23 10:40:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-23 10:40:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-23 10:40:06 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-23 10:40:06 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: DashboardController.getInventory() :: 47
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:81 - Module: Dashboard
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeController.gettotalpaidfee() :: 241
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getAuthentication() :: 155
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.authorizationForGet() :: 33
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received Dashboard
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:81 - Module: Fee
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 133
2017-02-23 10:40:06 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=100001
	Role=ADMIN ]
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: GetAuthorization.getPermission() :: 134
2017-02-23 10:40:06 INFO  Loggers:81 - Start :: Object Received Fee
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-23 10:40:06 INFO  Loggers:60 - End :: Object Received null
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-23 10:40:06 INFO  Loggers:60 - End :: Object Received null
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: InventoryServicesImpl.getInventoryList() :: 37
2017-02-23 10:40:06 INFO  Loggers:105 - End :: InventoryServicesImpl.getInventoryList() :: 39
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: InventoryDaoImpl.getInventoryList() :: 50
2017-02-23 10:40:06 INFO  Loggers:105 - End :: InventoryDaoImpl.getInventoryList() :: 70
2017-02-23 10:40:06 INFO  Loggers:84 - End :: Object Received [Inventory [
 category=chair, 
 itemType=chair,  
 entryTime=2017-02-14-18.27.04.767, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y], Inventory [
 category=chair, 
 itemType=dfgg,  
 entryTime=2017-02-14-18.27.15.460, 
 quantity=null, 
 leftQuantity=null, 
 exitTime=null, 
 updateTime=null, 
 isActive=Y]]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: DashboardController.getInventory() :: 95
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.getPermission() :: 145
2017-02-23 10:40:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-23 10:40:06 INFO  Loggers:105 - End :: GetAuthorization.authorizationForGet() :: 51
2017-02-23 10:40:06 INFO  Loggers:86 - 
 RolePermission [
{	 entryTime=2016-02-04 10:02:00, 
	role=ADMIN, 
	moduleName=Fee, 
	subModuleName=null
}, 
add=true,
view=true,
edit=true,
del=true,
updatedTime=null,
exitTime=null,
isActive=Y]
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalpaidfee() :: 145
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalpaidfee() :: 153
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeServicesImpl.gettotalfee() :: 131
2017-02-23 10:40:06 INFO  Loggers:105 - Start :: FeeDaoImpl.gettotalfee() :: 147
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeDaoImpl.gettotalfee() :: 166
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeServicesImpl.gettotalfee() :: 139
2017-02-23 10:40:06 INFO  Loggers:105 - End :: FeeController.gettotalpaidfee() :: 281
2017-02-23 10:40:09 INFO  Loggers:105 - Start :: LoginController.logout() :: 60
2017-02-23 10:40:09 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:09 INFO  Loggers:105 - Start :: TokenServiceImpl.deleteToken() :: 47
2017-02-23 10:40:09 INFO  Loggers:105 - Start :: TokenDaoImpl.deleteToken() :: 76
2017-02-23 10:40:09 INFO  Loggers:81 - Start :: Object Received 1118845535592417998935420223507
2017-02-23 10:40:09 INFO  Loggers:86 - 
Token [
	TokenNumber=1118845535592417998935420223507
	SmartID=null
	Role=null ]
2017-02-23 10:40:09 INFO  Loggers:105 - End :: TokenServiceImpl.deleteToken() :: 55
2017-02-23 19:40:48 INFO  XmlWebApplicationContext:873 - Closing WebApplicationContext for namespace 'mvc-dispatcher-servlet': startup date [Thu Feb 23 09:51:50 IST 2017]; root of context hierarchy
